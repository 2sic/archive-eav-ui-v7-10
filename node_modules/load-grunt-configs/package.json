{
  "name": "load-grunt-configs",
  "description": "Loads grunt task configurations from separate files",
  "version": "0.4.3",
  "homepage": "http://creynders.github.io/load-grunt-configs/",
  "author": {
    "name": "Camille Reynders",
    "email": "info@creynders.be",
    "url": "www.creynders.be"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/creynders/load-grunt-configs.git"
  },
  "bugs": {
    "url": "https://github.com/creynders/load-grunt-configs/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/creynders/load-grunt-configs/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/load-grunt-configs",
  "scripts": {
    "test": "grunt nodeunit"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "files": [
    "lib"
  ],
  "devDependencies": {
    "grunt-contrib-clean": "^0.6.0",
    "grunt-contrib-connect": "^0.10.1",
    "grunt-contrib-jshint": "^0.11.1",
    "grunt-contrib-nodeunit": "^0.4.1",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-markdown": "^0.7.0",
    "load-grunt-tasks": "^3.1.0",
    "minimist": "^1.1.1",
    "node-uuid": "~1.4.1",
    "proxyquire": "^1.4.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.2"
  },
  "keywords": [
    "grunt",
    "gruntfile",
    "gruntplugin",
    "configuration"
  ],
  "dependencies": {
    "cson-parser": "^1.0.9",
    "inquirer": "^0.8.2",
    "js-yaml": "^3.2.7",
    "lodash": "^3.6.0",
    "rimraf": "^2.3.2"
  },
  "readme": "# load-grunt-configs\n[![npm version](https://badge.fury.io/js/load-grunt-configs.svg)](http://badge.fury.io/js/load-grunt-configs)\n[![Build Status](https://secure.travis-ci.org/creynders/load-grunt-configs.svg?branch=master)](http://travis-ci.org/creynders/load-grunt-configs)\n\n> Loads grunt task configurations from separate files.\n\nGrunt files tend to grow fast due to big amount of tasks and their configuration objects.\n**This module allows you to split your Grunt task configuration objects into separate files any way you choose.**\nThere are similar modules that allow you to the same, but with `grunt-load-configs` **you can configure targets for a single task in multiple files**.\n\nThis means you no longer need to group all task targets into a single file, but can split them up according to their task dependencies.\n\n#### Example\n\nyou use the `watch` task to recompile your `.scss` files, but also to lint your source `.js` whenever one has changed. Typically you'd add a single `watch` configuration object to configure this, but with `load-grunt-configs` you can split these into several files and group all task targets together whenever it makes sense:\n\n```javascript\n\n//config/css.js\n\nmodule.exports.tasks={\n    watch:{\n        scss: {\n            files: ['app/sass/*.{scss,sass}'],\n            tasks: ['compass:source']\n        }\n    },\n    compass:{\n        source:{\n            //configuration settings\n        }\n    }\n};\n\n//config/lint.js\n\nmodule.exports.tasks = {\n    watch : {\n        lint: {\n            files: ['app/{,*/}*.js']\n            tasks: ['jshint:source']\n        }\n    },\n    jshint: {\n        source: {\n            //configuration settings\n        }\n    }\n}\n```\n\n## Getting Started\n\n`load-grunt-configs` supports the loading of grunt config files in following formats:\n\n* **json**\n* **js** modules\n* **coffee** modules\n* **cson**\n* **yaml**\n\nThough the provided examples are mainly for `json` files and `js` modules, the same applies to the other formats.\nYou can find examples of all formats in the [`config`][config] directory of this project.\n\n### Migrating your configuration from a big, fat grunt file\n\nI wrote a small utility Grunt task which takes your full-blown Grunt configuration and automatically splits it into separate files: [grunt-generate-configs][grunt-generate-configs] (supports all formats `load-grunt-configs` does too)\n\n**You only need to do this once**:\n\n```shell\n$ npm install grunt-generate-configs -g\n# cd to your project directory containing the Gruntfile\n$ generate_configs\n```\n\nThis will create a separate `.json` file for each task inside a `config` directory. (See [grunt-generate-configs][grunt-generate-configs] for all options: a different format, directory, etc.)\n\nNext you need to delete the full configuration object in your `Gruntfile.js`.\n\nThen ...\n\n### Automatically loading the config files\n\nInstall the _load-grunt-configs_ module with: `npm install load-grunt-configs --save-dev`\n\n```javascript\n// Gruntfile.js\nmodule.exports = function (grunt) {\n    grunt.loadNpmTasks('grunt-contrib-jshint');\n\n    //loads the various task configuration files\n    var configs = require('load-grunt-configs')(grunt);\n    grunt.initConfig(configs);\n\n    grunt.registerTask('default', ['jshint']);\n}\n```\n\n`load-grunt-configs` supports the loading of config files as `.js`, `.json`, `.yaml` or `.coffee`. You can even mix and match if you want. Take a look at the [`config`][config] folder of this project to see examples for all formats.\n\nTo configure the `jshint` task for example, add a file `config/jshint.json` (in case you didn't use the generator to automatically generate it):\n\n```json\n{\n    \"gruntfile\"       : {\n        \"src\" : \"Gruntfile.js\"\n    }\n}\n```\n\nBy default the basename (without the file extension) of the filename will be used to recognize which task is being configured. `jshint` in the above example.\n\n## Advanced usage\n\n### Using node modules for configuration\n\nTask configuration is also possible through node modules, either by exposing an object:\n\n```javascript\n//config/jshint.js\nmodule.exports = {\n     gruntfile       : {\n         src : \"Gruntfile.js\"\n     }\n }\n ```\n\n Or by exposing a function which returns an object:\n\n```javascript\n//config/jshint.js\nmodule.exports = function(grunt, options){\n     return {\n         gruntfile       : {\n             src : \"Gruntfile.js\"\n         }\n     }\n }\n```\n\n### Declaring multiple task configurations in one file\n\nIf the returned object contains a `tasks` key, its value will be assumed to be a name/configuration pair mapping:\n\n```javascript\n//config/grunt.json\n{\n    \"tasks\" : {\n        \"jshint\" : {\n            \"gruntfile\"       : {\n                \"src\" : \"Gruntfile.js\"\n            }\n        },\n        \"watch\" : {\n            \"gruntfile\"       : {\n                \"src\" : \"Gruntfile.js\",\n                \"tasks\" : ['jshint:gruntfile']\n            }\n        }\n    }\n}\n```\nThe above will configure both the `jshint` and `watch` tasks.\n\n### Split multi-task configurations\n\nBut wait, there is more!\nYou can split multi-task configurations in multiple files as well.\nFor instance if you have the above `config/grunt.json` file and you add the following file:\n\n```javascript\n//config/test.json\n{\n    \"tasks\": {\n        \"jshint\" : {\n            \"test\": {\n                \"src\": [\"test/**/*.js\"]\n            }\n        }\n        \"watch\" : {\n            \"test\" : {\n                \"src\" : [\"test/**/*.js\"],\n                \"tasks\" : ['jshint:test']\n            }\n        }\n    }\n}\n```\n\nNow both `watch` and `jshint` tasks have two targets: `gruntfile` and `test`.\n\n### Passing values to the configuration files\n\nIf you declare a function in your config file it receives two arguments: `grunt` and `options`, which allows you to use the `grunt` instance and pass values.\n\n```javascript\n// Gruntfile.js\nvar options = {\n    paths: {\n        jshintrc: '.jshintrc'\n    }\n};\n\nvar configs = require('load-grunt-configs')(grunt, options);\n\n// config/jshint.js\nmodule.exports = function(grunt, options){\n    return {\n        options: {\n            jshintrc: '<%= paths.jshintrc %>'\n        },\n\n        gruntfile: {\n            src: 'Gruntfile.js'\n        }\n    };\n}\n```\n\n### Task name prefixed task targets\n\nAs a convenience method you can prefix your task targets with the task name, separated by a \":\" (colon). This allows you to do this:\n\n```javascript\n//config/monitor.js\nmodule.exports.tasks = {\n    \"watch:test\" : {\n        src : [\"test/**/*.js\"],\n        tasks : ['jshint:test']\n    },\n    \"watch:gruntfile\"       : {\n        src : \"Gruntfile.js\",\n        tasks : ['jshint:gruntfile']\n    }\n}\n\n```\n\nThis makes it easier when in the future you'd like to move the `watch:gruntfile` task configuration to another file for instance.\n\n### Troubleshooting\n\nThe tradeoff of a neatly organized Grunt configuration is sometimes having trouble locating which file is declaring exactly what.\n\nIn that case, or if loading some file is causing an error and aborting your Grunt process, you can always run:\n\n```shell\ngrunt --verbose\n```\n\nA nice log of processed files and loaded tasks/targets will help you locate the problems. Here's the output when running\non this very repo:\n\n\n```\nLoading grunt configs via \"load-grunt-configs\" from 6 file(s).\nLoading config/connect.js...is fn(), invoking...OK\n+ connect: [options, docs]\n\nLoading config/jshint.json...OK\n+ jshint: [options, lib, build, test]\n\nLoading config/watch.js...is fn(), invoking...OK\n+ watch: [lib, build, test, docs, livereload]\n\nLoading config/clean.coffee...is fn(), invoking...OK\n+ clean: [config, tmp]\n\nLoading config/nodeunit.yml...OK\n+ nodeunit: [load_grunt_configs]\n\nLoading config/markdown.cson...OK\n+ markdown: [docs]\n\n```\n\n\n## Options\n\nYou can modify the directory in which the configuration files need to reside:\n\n```javascript\n//Gruntfile.js\nvar options = {\n    config : {\n        src: \"options/*.js\"\n    }\n};\n\nconfigs = require('load-grunt-configs')(grunt, options);\n```\n\nWill search for the configuration files in an `options` directory.\n\nYou can also supply a customizer function for the configuration merging:\n\n```javascript\n//Gruntfile.js\nvar options = {\n    config : {\n        mergeCustomizer: function(a, b) {\n            return Array.isArray(a) ? a.concat(b) : undefined;\n        }\n    }\n};\n\nconfigs = require('load-grunt-configs')(grunt, options);\n```\n\nSee [lodash#merge](https://lodash.com/docs#merge) for more information on the customizer function.\n\n\n## Examples\n\nYou can take a look at the `Gruntfile.js` and the configuration files in the `config` directory of this project.\nOr browse through the 3 demos in this repository:\n\n1. [Configuration per task](https://github.com/creynders/load-grunt-configs/tree/master/demos/1.by-taskname). Each task configuration goes into its own file: `watch.js`, `jshint.js`, `concurrent.js`, ...\n1. [A single configs file](https://github.com/creynders/load-grunt-configs/tree/master/demos/2.single-file). The entirety of the grunt configuration is moved to a seperate file (`grunt.js`). This way the Gruntfile.js only contains task declarations.\n1. [Configuration by task type](https://github.com/creynders/load-grunt-configs/tree/master/demos/3.by-type). Task target configurationsare spread over multiple files and grouped wherever logically it makes sense.\nE.g. `build.js`, `serve.js`, `test.js`\n1. [Various formats][config]: See the `config` directory of this project.\n\n## All various possibilities\n\n* **json with a single task configuration**: E.g. configures `jshint` task in `config/jshint.json` (task name extracted from file name)\n\n```json\n{\n    \"gruntfile\"       : {\n        \"src\" : \"Gruntfile.js\"\n    }\n}\n```\n\n* **json with multiple task configurations**: E.g. configures `jshint` and `watch` tasks in `config/<whatever makes sense to you>.json`. Note the top-most key \"tasks\" here, it alerts the module not to extract the task name from the file name.\n\n```json\n{\n    \"tasks\" : {\n        \"jshint\" : {\n            \"gruntfile\"       : {\n                \"src\" : \"Gruntfile.js\"\n            }\n        },\n        \"watch\" : {\n            \"gruntfile\"       : {\n                \"src\" : \"Gruntfile.js\",\n                \"tasks\" : ['jshint:gruntfile']\n            }\n        }\n    }\n}\n```\n\n* **json with multiple task configurations using task prefixed targets**: E.g. configures `jshint` and `watch` tasks in `config/<whatever makes sense to you>.json`\n\n```json\n{\n    \"tasks\" : {\n        \"jshint:gruntfile\"       : {\n            \"src\" : \"Gruntfile.js\"\n        },\n        \"watch:gruntfile\"       : {\n            \"src\" : \"Gruntfile.js\",\n            \"tasks\" : ['jshint:gruntfile']\n        }\n    }\n}\n```\n\n* **js with single task configuration as an object**: E.g. configures `jshint` task in `config/jshint.js`\n\n```javascript\nmodule.exports = {\n     gruntfile       : {\n         src : \"Gruntfile.js\"\n     }\n};\n```\n\n* **js with single task configuration as a function**: E.g. configures `jshint` task in `config/jshint.js`\n\n```javascript\nmodule.exports = function(grunt, options){\n    return {\n        gruntfile       : {\n            src : \"Gruntfile.js\"\n        }\n    };\n};\n```\n\n* **js with multiple task configurations as an object**: E.g. configures `jshint` and `watch` task in `config/<whatever makes sense to you>.js`\n\n```javascript\nmodule.exports.tasks = { //note the `tasks` export here [!]\n    jshint: {\n        gruntfile       : {\n            src : \"Gruntfile.js\"\n        }\n    },\n    watch : {\n        gruntfile       : {\n            src : \"Gruntfile.js\",\n            tasks : ['jshint:gruntfile']\n        }\n    }\n\n};\n```\n\n* **js with multiple task configurations as a function**: E.g. configures `jshint` and `watch` task in `config/<whatever makes sense to you>.js`\n\n```javascript\nmodule.exports = function(grunt, options) {\n    return {\n        tasks:{\n            jshint: {\n                gruntfile       : {\n                    src : \"Gruntfile.js\"\n                }\n            },\n            watch : {\n                gruntfile       : {\n                    src : \"Gruntfile.js\",\n                    tasks : ['jshint:gruntfile']\n                }\n            }\n        }\n    };\n};\n```\n\n* **js with multiple task configurations as an object using task prefixed targets**: E.g. configures `jshint` and `watch` task in `config/<whatever makes sense to you>.js`\n\n```javascript\nmodule.exports.tasks = { //note the `tasks` export here [!]\n    \"jshint:gruntfile\"       : {\n        src : \"Gruntfile.js\"\n    },\n    \"watch:gruntfile\"       : {\n            src : \"Gruntfile.js\",\n            tasks : ['jshint:gruntfile']\n    }\n};\n```\n\n* **js with multiple task configurations as a function using task prefixed targets**: E.g. configures `jshint` and `watch` task in `config/<whatever makes sense to you>.js`\n\n```javascript\nmodule.exports = function(grunt, options) {\n    return {\n        tasks:{\n            \"jshint:gruntfile\"       : {\n                src : \"Gruntfile.js\"\n            },\n            \"watch:gruntfile\"       : {\n                src : \"Gruntfile.js\",\n                tasks : ['jshint:gruntfile']\n            }\n        }\n    };\n};\n```\n\n## Changelog\n\n* __v0.4.3__:\n    * Update dependencies\n    * Swap cson-safe to cson-parser\n    * add `mergeCustomizer`\n* __v0.4.2__: Explicit bailing on invalid task config\n* __v0.4.1__: Better verbose output\n* __v0.4.0__: Switch to cson-safe for parsing cson\n* __v0.3.3__:\n    * Add cson support\n    * Loads yaml files with safeLoad\n* __v0.3.2__:\n    * fixes incorrect grunt dep\n    * adds coffee config file\n    * adds yaml support\n* __v0.3.1__:\n    * fixes incorrect overwrite of passedin options for this task\n    * adds tests\n    * Updates examples and adds all various configuration possibilities\n* __v0.3.0__:\n    * disallows function declaration anywhere else than as direct export\n    * extracts taskname regardless of file extension\n* __v0.2.0__:\n    * adds coffeescript support\n    * adds parsing of taskname prefixed task targets\n    * fixes incorrect handling of functions at task config leaves\n* __v0.1.0__:\n    * adds \"by type' demo\n    * adds \"by taskname\" demo\n    * adds \"single file\" demo\n    * Initial commit\n\n## Contributors\n\n* [Camille Reynders](https://github.com/creynders)\n* [Jan Raasch](https://github.com/janraasch)\n* [Andre Torgal](https://github.com/andrezero)\n* [Cody Mize](https://github.com/kingcody)\n* [Jan Olaf Krems](https://github.com/jkrems)\n\n## License\nCopyright (c) 2014 Camille Reynders\nLicensed under the MIT license.\n\nWith special thanks to @stefanpenner and @thomasboyt.\nThis module is based on the ideas in Thomas' excellent tutorial:\nhttp://www.thomasboyt.com/2013/09/01/maintainable-grunt.html\n\n[![Analytics](https://ga-beacon.appspot.com/UA-12080113-4/load-grunt-configs/README.md)](https://github.com/igrigorik/ga-beacon)\n\n[grunt-generate-configs]: https://github.com/creynders/grunt-generate-configs\n[config]: https://github.com/creynders/load-grunt-configs/tree/master/config\n",
  "readmeFilename": "README.md",
  "_id": "load-grunt-configs@0.4.3",
  "_shasum": "02ad5c62df1c16821d4521141aa95362d3e765be",
  "_from": "load-grunt-configs@0.4.3",
  "_resolved": "https://registry.npmjs.org/load-grunt-configs/-/load-grunt-configs-0.4.3.tgz"
}
