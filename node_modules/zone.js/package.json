{
  "name": "zone.js",
  "version": "0.5.4",
  "description": "Zones for JavaScript",
  "main": "lib/zone.js",
  "files": [
    "lib",
    "dist"
  ],
  "directories": {
    "lib": "lib",
    "test": "test"
  },
  "scripts": {
    "test": "karma start karma.conf.js",
    "serve": "python -m SimpleHTTPServer 8000"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/angular/zone.js.git"
  },
  "author": {
    "name": "Brian Ford"
  },
  "license": "Apache 2.0",
  "bugs": {
    "url": "https://github.com/angular/zone.js/issues"
  },
  "devDependencies": {
    "browserify": "^9.0.8",
    "es6-promise": "^2.3.0",
    "gulp": "^3.8.11",
    "gulp-rename": "^1.2.2",
    "gulp-uglify": "^1.2.0",
    "jasmine-core": "^2.2.0",
    "karma": "^0.12.31",
    "karma-browserify": "^4.1.2",
    "karma-chrome-launcher": "^0.1.7",
    "karma-firefox-launcher": "^0.1.4",
    "karma-jasmine": "^0.3.5",
    "karma-safari-launcher": "^0.1.1",
    "karma-sauce-launcher": "^0.2.10",
    "nodejs-websocket": "^1.2.0",
    "vinyl-buffer": "^1.0.0",
    "vinyl-source-stream": "^1.1.0"
  },
  "readme": "# Zone.js\n\n[![Build Status](https://travis-ci.org/angular/zone.js.png)](https://travis-ci.org/angular/zone.js)\n\nImplements _Zones_ for JavaScript, inspired by [Dart](https://www.dartlang.org/articles/zones/).\n\n\n## What's a Zone?\n\nA Zone is an execution context that persists across async tasks.\nYou can think of it as [thread-local storage](http://en.wikipedia.org/wiki/Thread-local_storage) for JavaScript VMs.\n\nSee this video from ng-conf 2014 for a detailed explanation:\n\n[![screenshot of the zone.js presentation and ng-conf 2014](/presentation.png)](//www.youtube.com/watch?v=3IqtmUscE_U)\n\n### Running Within a Zone\n\nYou can run code within a zone with `zone.run`.\nTasks scheduled (with `setTimeout`, `setInterval`, or event listeners) stay within that zone.\n\n```javascript\nzone.fork().run(function () {\n  zone.inTheZone = true;\n\n  setTimeout(function () {\n    console.log('in the zone: ' + !!zone.inTheZone);\n  }, 0);\n});\n\nconsole.log('in the zone: ' + !!zone.inTheZone);\n```\n\nThe above will log:\n\n```\n'in the zone: false'\n'in the zone: true'\n```\n\nNote that the function delayed by `setTimeout` stays inside the zone.\n\n### Forking a Zone\n\nZones have a set of hooks that allow you to change the behavior of code running within that zone.\nTo change a zone, you _fork_ it to get a new one.\n\n```javascript\nzone.fork({\n  beforeTask: function () {\n    console.log('hi');\n  }\n}).run(function () {\n  // do stuff\n});\n```\n\nHooks that you don't override when forking a zone are inherited from the existing one.\n\nSee the [API docs](#api) below for more.\n\n\n## Usage\n\nTo start using Zones, you need to include the `zone.js` script in this package onto\nyour page. This script should appear in the `<head>` of your HTML file before any other\nscripts, including shims/polyfills.\n\n\n## Examples\n\nThere are two kinds of examples:\n\n  1. The kind you have to run\n  2. Illustrative code snippets in this README\n\n### Running the ones that you have to run\n\nFor fully working examples:\n\n  1. Spawn a webserver in the root of the directory in which this repo lives.\n  (I like to use `python -m SimpleHTTPServer 3000`).\n  2. Open `http://localhost:3000/example` in your browser\n\nBelow are the aforementioned snippets.\n\n### Overriding A Zone's Hook\n\n```javascript\nvar someZone = zone.fork({\n  afterTask: function () {\n    console.log('goodbye');\n  }\n});\n\nsomeZone.fork({\n  afterTask: function () {\n    console.log('cya l8r');\n  }\n}).run(function () {\n  // do stuff\n});\n\n// logs: cya l8r\n```\n\n### Augmenting A Zone's Hook\n\nWhen you fork a zone, you'll often want to control how the parent zone's\nhook gets called.\n\nPrefixing a hook with `$` means that the hook will be passed the\nparent zone's hook, and the hook will be expected to return the function to\nbe invoked rather than be the function itself.\n\n```javascript\nvar someZone = zone.fork({\n  afterTask: function () {\n    console.log('goodbye');\n  }\n});\n\nsomeZone.fork({\n  $afterTask: function (parentOnLeave) {\n    // return the hook\n    return function afterTask() {\n      parentOnLeave();\n      console.log('cya l8r');\n    };\n  }\n}).run(function () {\n  // do stuff\n});\n\n// logs: goodbye\n//       cya l8r\n```\n\n#### `+` and `-` Sugar\nMost of the time, you'll want to run a hook before or after the parent's implementation.\nYou can prefix a hook with `-` for running before, and `+` for running after.\n\nThe above can be written like this:\n\n```javascript\nvar someZone = zone.fork({\n  afterTask: function () {\n    console.log('goodbye');\n  }\n});\n\nsomeZone.fork({\n  '+afterTask': function () {\n    console.log('cya l8r');\n  }\n}).run(function () {\n  // do stuff\n});\n\n// logs: goodbye\n//       cya l8r\n```\n\nThis frees you from writing boilerplate to compose a new hook.\n\n## API\n\nZone.js exports a single object: `window.zone`.\n\n### `zone.run`\n\nRuns a given function within the zone.\nExplained above.\n\n### `zone.bind`\n\nTransforms a function to run within the given zone.\n\n### `zone.fork`\n\n```javascript\nzone.fork({\n  onZoneCreated: function () {},\n  beforeTask: function () {},\n  afterTask: function () {},\n  onError: function () {},\n  enqueueTask: function() {},\n  dequeueTask: function() {},\n  setTimeout: function () {},\n  setInterval: function () {},\n  alert: function () {},\n  prompt: function () {},\n  addEventListener: function () {}\n});\nmyZone.run(function () {\n  // woo!\n});\n```\n\nBelow describes the behavior of each of these hooks.\n\n### `zone.onZoneCreated`\n\nRuns when a zone is forked.\n\n### `zone.beforeTask`\n\nBefore a function invoked with `zone.run`, this hook runs.\nIf `zone.beforeTask` throws, the function  passed to `run` will not be invoked.\n\n### `zone.afterTask`\n\nAfter a function in a zone runs, the `afterTask` hook runs.\nThis hook will run even if the function passed to `run` throws.\n\n### `zone.onError`\n\nThis hook is called when the function passed to `run` or the `beforeTask` hook throws.\n\n### `zone.enqueueTask`\n\nThis hook is called when a function is registered with the VM.\nFor instance `setTimeout` and `addEventListener`.\n\n### `zone.dequeueTask`\n\nThis hook is called when a function is unregistered with the VM.\nFor instance `clearTimeout` and `removeEventListener`.\n\n### `zone.setTimeout`, `zone.setInterval`, `zone.alert`, `zone.prompt`\n\nThese hooks allow you to change the behavior of `window.setTimeout`, `window.setInterval`, etc.\nWhile in this zone, calls to `window.setTimeout` will redirect to `zone.setTimeout`.\n\n### `zone.requestAnimationFrame`, `zone.webkitRequestAnimationFrame`, `zone.mozRequestAnimationFrame`\n\nThese hooks allow you to change the behavior of `window.requestAnimationFrame()`, \n`window.webkitRequestAnimationFrame`, and `window.mozRequestAnimationFrame`.\n\nBy default the callback is executed in the zone where those methods have been called to avoid \ngrowing the stack size on each recursive call.\n\n### `zone.addEventListener`\n\nThis hook allows you to intercept calls to `EventTarget.addEventListener`.\n\n\n## Status\n\n* `setTimeout`, `setInterval`, and `addEventListener` work in FF23, IE10, and Chrome.\n* stack trace rewrite is kinda ugly and may contain extraneous calls.\n* `elt.onevent` works in FF23, IE10, but not Chrome. There's [a fix in the works though](https://code.google.com/p/chromium/issues/detail?id=43394)!\n\n\n## See also\n* [async-listener](https://github.com/othiym23/async-listener) - a similar library for node\n* [Async stack traces in Chrome](http://www.html5rocks.com/en/tutorials/developertools/async-call-stack/)\n* [strongloop/zone](https://github.com/strongloop/zone)\n* [vizone](https://github.com/gilbox/vizone) â€“ control flow visualizer that uses zone.js\n\n\n## License\nApache 2.0\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/angular/zone.js",
  "_id": "zone.js@0.5.4",
  "_shasum": "96069f36be94a6c9bbf0933cae12ec3f53f79873",
  "_from": "zone.js@0.5.4",
  "_resolved": "https://registry.npmjs.org/zone.js/-/zone.js-0.5.4.tgz"
}
