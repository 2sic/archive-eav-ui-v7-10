{"version":3,"sources":["eav-edit.min.js"],"names":["enhanceEntity","entity","enhancer","this","enhanceWithCount","obj","count","key","hasOwnProperty","enhanceVs","vs","hasLanguage","language","Dimensions","setLanguage","shareMode","languageMode","enhanceAtt","att","getVsWithLanguage","v","Values","length","setLanguageToVs","removeLanguage","value","Object","keys","removeVs","splice","addVs","dimensions","undefined","newVs","Value","push","ent","getTitle","getAttribute","TitleAttributeName","hasAttribute","attrName","Attributes","addAttribute","attKey","angular","module","config","$ocLazyLoadProvider","debug","constant","formlyConfigProvider","setType","name","templateUrl","wrapper","defaultFieldWrappers","Date","prototype","toJSON","x","setHours","getHours","getTimezoneOffset","toISOString","template","defaultOptions","templateOptions","datepickerOptions","datepickerPopup","link","scope","el","attrs","convertDateToUTC","date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","controller","$scope","$http","$filter","$translate","$modal","appId","eavAdminDialogs","eavDefaultValueService","to","settings","merged","availableEntities","model","options","chosenEntities","selectedEntity","addEntity","createEntityAllowed","EntityType","EnableCreate","openNewEntityDialog","reload","result","data","getAvailableEntities","then","openItemNew","method","url","params","contentTypeName","getEntityText","entityId","entities","Text","instant","removeSlot","itemGuid","index","deleteItemInSlot","alert","edit","id","Id","openItemEditWithEntityId","directive","restrict","require","element","ngModel","$validators","required","modelValue","viewValue","$parent","Array","isArray","$watch","$viewValue","newValue","$validate","ngModelAttrs","{{to.settings.merged.Min}}","{{to.settings.merged.Max}}","{{to.settings.merged.Decimals ? \"^[0-9]+(.[0-9]{1,\" + to.settings.merged.Decimals + \"})?$\" : null}}","vm","validationRegexString","stringSettings","ValidationRegExJavaScript","regexPattern","RegExp","console","log","_defineProperty","defineProperty","enumerable","configurable","writable","DropdownValues","o","replace","split","map","e","i","s","ngOptions","debugState","stripNonUrlCharacters","controlSettings","sourceMask","AutoGenerateMask","lastAutoCopy","sourcesChangedTryToUpdate","orig","getFieldContentBasedOnMask","cleaned","maskRegEx","mask","forEach","getFieldsOfMask","replaceValue","_currentValue","matches","match","staticName","finalClean","activate","on","factory","inputValue","allowPath","trimEnd","rexAllowed","rexSeparators","rexMult","rexTrim","cleanInputValue","modelCtrl","$parsers","$setViewValue","$render","app","entitiesSvc","toastr","saveToastr","ctrlS","saveShortcut","save","loadAll","deactivate","unbind","isWorking","registeredControls","items","willPublish","$on","registerEditControl","control","getManyForEditing","itemList","Entity","Header","ContentTypeName","newEntity","grp","Group","slotIsUsed","SlotIsEmpty","IsPublished","showFormErrors","errors","formErrors","msgs","msgTemplate","set","req","itm","field","$name","error","concat","nice","err","specs","msg","join","allowHtml","close","isValid","saveMany","state","setPristine","afterSaveEvent","response","valid","list","isDirty","dirty","oldValue","toggleSlotIsEmpty","item","controllerAs","formlyConfig","contentTypeFieldSvc","$sce","customInputTypes","eavConfig","editInDefaultLanguageFirst","formFields","form","$valid","$dirty","$setPristine","$error","loadContentType","StaticName","Type","getFields","InputType","getType","formly","inputTypeReconfig","InputTypeConfig","addInputType","promiseToLoad","loadWithPromise","dependencyResult","registerAllFieldsFromReturnedDefinition","lastGroupHeadingId","Metadata","All","fieldType","isFieldHeading","nextField","type","Required","label","Name","description","trustAsHtml","Notes","header","canCollapse","fieldGroup","disabled","Disabled","langReadOnly","className","toLowerCase","hide","VisibleInEditUI","expressionProperties","templateOptions.disabled","watcher","expression","stop","listener","stopWatching","collapseGroup","collapse","attributeConfiguration","inputType","indexOf","willBeRewrittenByConfig","inputTypeReplacementMap","typeAlreadyRegistered","typeWillRegisterLaterWithAssets","Assets","$q","$modalInstance","$window","afterSave","status","maybeLeave","unsavedChangesText","confirm","preventDefault","addEventListener","window","event","returnValue","eavLocalization","setWrapper","languages","isDisabled","transclude","langConf","initCurrentValue","fieldModel","currentLanguage","defaultLanguage","defaultValue","languageToAdd","valueToEdit","_initCurrentValue","formModel","lblDefault","languageKey","isDefaultLanguage","enableTranslate","infoMessage","tooltip","editableIn","usedIn","actions","toggleTranslate","translate","linkDefault","autoTranslate","copyFrom","useFrom","shareFrom","all","forAllMenus","localizationMenus","action","compile","attributes","modelController","$formatters","parsers","service","$interval","$ocLazyLoad","svc","inputTypesOnPage","allLoaded","assetsToLoad","addToLoadQueue","assetsLoaded","a","asset","trim","resolveSpecialPaths","load","getUrlPrefix","checkDependencyArrival","typeName","fieldConfig","d","DefaultValue","Prefill","Number","toastrWithHttpErrorHandling","promiseToastr","post","removeTempValue","itmCopy","copy","ei","serverKeys","syncUpdatedKeys","Guid","newId","ID","delPromise","get","ignoreErrors","contentType","newData","run","$templateCache","put"],"mappings":"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","file":"eav-edit.min.js","sourcesContent":["/* \r\n * Custom Fields skelleton to allow later, lazy loaded fields\r\n */\r\n(function() {\r\n    \"use strict\";\r\n    var module = angular.module(\"eavCustomFields\", [\"oc.lazyLoad\"])\r\n\r\n    .config([\"$ocLazyLoadProvider\", function ($ocLazyLoadProvider) {\r\n        $ocLazyLoadProvider.config({\r\n            debug: true\r\n        });\r\n    }]);\r\n\r\n})();\n/* Main object with dependencies, used in wrappers and other places */\r\n(function () {\r\n\t\"use strict\";\r\n\r\n    angular.module(\"eavEditEntity\", [\r\n        \"formly\",\r\n        \"ui.bootstrap\",\r\n        \"uiSwitch\",\r\n        \"toastr\",\r\n        \"ngAnimate\",\r\n        \"EavServices\",\r\n        \"eavEditTemplates\",\r\n        \"eavFieldTemplates\",\r\n        \"eavCustomFields\",\r\n\r\n        // new...\r\n        \"oc.lazyLoad\"\r\n    ]);\r\n\r\n\r\n\r\n})();\n/* \r\n * Field-Templates app initializer\r\n */\r\n\r\nangular.module(\"eavFieldTemplates\",\r\n    [\r\n        \"formly\",\r\n        \"formlyBootstrap\",\r\n        \"ui.bootstrap\",\r\n        \"eavLocalization\",\r\n        \"eavEditTemplates\",\r\n        \"ui.tree\"\r\n    ]\r\n)\r\n    // important: order of use is backwards, so the last is around the second-last, etc.\r\n    .constant(\"defaultFieldWrappers\", [\r\n        \"eavLabel\",\r\n        \"bootstrapHasError\",\r\n        \"disablevisually\",\r\n        \"eavLocalization\",\r\n        \"collapsible\"\r\n    ])\r\n;\n/* \r\n * Field: Boolean - Default\r\n */\r\n\r\nangular.module(\"eavFieldTemplates\")\r\n    .config([\"formlyConfigProvider\", function(formlyConfigProvider) {\r\n        formlyConfigProvider.setType({\r\n            name: \"boolean-default\",\r\n            templateUrl: \"fields/boolean/boolean-default.html\",\r\n            wrapper: [\"bootstrapHasError\", \"disablevisually\", \"eavLocalization\", \"collapsible\"]\r\n        });\r\n    }]);\n/* \r\n * Field: Custom - Default (basically something you should never see)\r\n */\r\n\r\nangular.module(\"eavFieldTemplates\")\r\n    .config([\"formlyConfigProvider\", \"defaultFieldWrappers\", function (formlyConfigProvider, defaultFieldWrappers) {\r\n\r\n        formlyConfigProvider.setType({\r\n            name: \"custom-default\",\r\n            templateUrl: \"fields/custom/custom-default.html\",\r\n            wrapper: defaultFieldWrappers\r\n        });\r\n\r\n    }]);\n// this changes JSON-serialization for dates, \r\n// because we usually want the time to be the same across time zones and NOT keeping the same moment\r\nDate.prototype.toJSON = function() {\r\n    var x = new Date(this);\r\n    x.setHours(x.getHours() - x.getTimezoneOffset() / 60);\r\n    return x.toISOString();\r\n};\n/* \r\n * Field: DateTime - Default\r\n */\r\n\r\nangular.module(\"eavFieldTemplates\")\r\n    .config([\"formlyConfigProvider\", \"defaultFieldWrappers\", function (formlyConfigProvider, defaultFieldWrappers) {\r\n\r\n        formlyConfigProvider.setType({\r\n            name: \"datetime-default\",\r\n            wrapper: defaultFieldWrappers,\r\n            template: \"<div>\" +\r\n                \"<div class=\\\"input-group\\\">\" +\r\n                    \"<div class=\\\"input-group-addon\\\" style=\\\"cursor:pointer;\\\" ng-click=\\\"to.isOpen = true;\\\">\" +\r\n                        \"<i class=\\\"glyphicon glyphicon-calendar\\\"></i>\" +\r\n                    \"</div>\" +\r\n                    \"<input class=\\\"form-control input-lg\\\" ng-model=\\\"value.Value\\\" is-open=\\\"to.isOpen\\\" datepicker-options=\\\"to.datepickerOptions\\\" datepicker-popup />\" +\r\n\t\t\t\t    \"<timepicker ng-show=\\\"to.settings.merged.UseTimePicker\\\" ng-model=\\\"value.Value\\\" show-meridian=\\\"ismeridian\\\"></timepicker>\" +\r\n                \"</div>\",\r\n            defaultOptions: {\r\n                templateOptions: {\r\n                    datepickerOptions: {},\r\n                    datepickerPopup: \"dd.MM.yyyy\"\r\n                }\r\n            },\r\n            link: function (scope, el, attrs) {\r\n                // Server delivers value as string, so convert it to UTC date\r\n                function convertDateToUTC(date) { return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds()); }\r\n                if (scope.value && scope.value.Value && typeof (scope.value.Value) === 'string')\r\n                    scope.value.Value = convertDateToUTC(new Date(scope.value.Value));\r\n            }\r\n        });\r\n\r\n    }]);\n/* \r\n * Field: Empty - Default: this is usually a title/group section\r\n */\r\n\r\nangular.module(\"eavFieldTemplates\")\r\n    .config([\"formlyConfigProvider\", function(formlyConfigProvider) {\r\n        formlyConfigProvider.setType({\r\n            name: \"empty-default\",\r\n            templateUrl: \"fields/empty/empty-default.html\",\r\n            wrapper: [\"fieldGroup\"]\r\n        });\r\n    }]);\n/* \r\n * Field: Entity - Default\r\n * Also contains much business logic and the necessary controller\r\n * \r\n */\r\n\r\nangular.module(\"eavFieldTemplates\")\r\n    .config([\"formlyConfigProvider\", function(formlyConfigProvider) {\r\n\r\n        formlyConfigProvider.setType({\r\n            name: \"entity-default\",\r\n            templateUrl: \"fields/entity/entity-default.html\",\r\n            wrapper: [\"eavLabel\", \"bootstrapHasError\", \"collapsible\"],\r\n            controller: \"FieldTemplate-EntityCtrl\",\r\n            //defaultOptions: {\r\n            //    validators: {\r\n            //        required: function (viewValue, modelValue, scope) {\r\n            //            var value = viewValue || modelValue;\r\n            //            if (!Array.isArray(value))\r\n            //                return true;\r\n            //            return value.length > 0;\r\n            //        }\r\n            //    }\r\n            //}\r\n        });\r\n\r\n\r\n    }])\r\n    .controller(\"FieldTemplate-EntityCtrl\", [\"$scope\", \"$http\", \"$filter\", \"$translate\", \"$modal\", \"appId\", \"eavAdminDialogs\", \"eavDefaultValueService\", function ($scope, $http, $filter, $translate, $modal, appId, eavAdminDialogs, eavDefaultValueService) {\r\n        if (!$scope.to.settings.merged)\r\n            $scope.to.settings.merged = {};\r\n\r\n        $scope.availableEntities = [];\r\n        //$scope.options = {};\r\n\r\n        if ($scope.model[$scope.options.key] === undefined || $scope.model[$scope.options.key].Values[0].Value === \"\")\r\n            $scope.model[$scope.options.key] = { Values: [{ Value: eavDefaultValueService($scope.options), Dimensions: {} }] };\r\n\r\n        $scope.chosenEntities = $scope.model[$scope.options.key].Values[0].Value;\r\n        $scope.selectedEntity = null;\r\n\r\n        $scope.addEntity = function () {\r\n            if ($scope.selectedEntity !== null) {\r\n                $scope.chosenEntities.push($scope.selectedEntity);\r\n                $scope.selectedEntity = null;\r\n            }\r\n        };\r\n\r\n        $scope.createEntityAllowed = function() {\r\n            var settings = $scope.to.settings.merged;\r\n            return settings.EntityType !== null && settings.EntityType !== \"\" && settings.EnableCreate;\r\n        };\r\n\r\n        $scope.openNewEntityDialog = function() {\r\n            function reload(result) {\r\n                if (!result || result.data === null || result.data === undefined)\r\n                    return;\r\n\r\n                $scope.getAvailableEntities().then(function () {\r\n                    $scope.chosenEntities.push(Object.keys(result.data)[0]);\r\n                });\r\n            }\r\n\r\n            eavAdminDialogs.openItemNew($scope.to.settings.merged.EntityType, reload);\r\n\r\n        };\r\n\r\n        $scope.getAvailableEntities = function() {\r\n            return $http({\r\n                method: \"GET\",\r\n                url: \"eav/EntityPicker/getavailableentities\",\r\n                params: {\r\n                    contentTypeName: $scope.to.settings.merged.EntityType,\r\n                    appId: appId\r\n                    // ToDo: dimensionId: $scope.configuration.DimensionId\r\n                }\r\n            }).then(function(data) {\r\n                $scope.availableEntities = data.data;\r\n            });\r\n        };\r\n\r\n        $scope.getEntityText = function (entityId) {\r\n            if (entityId === null)\r\n                return \"empty slot\"; // todo: i18n\r\n            var entities = $filter(\"filter\")($scope.availableEntities, { Value: entityId });\r\n            return entities.length > 0 ? entities[0].Text : $translate.instant(\"FieldType.Entity.EntityNotFound\"); \r\n        };\r\n\r\n        // remove needs the index --> don't name \"remove\" - causes problems\r\n        $scope.removeSlot = function(itemGuid, index) {\r\n            $scope.chosenEntities.splice(index, 1);\r\n        };\r\n\r\n        $scope.deleteItemInSlot = function(itemGuid, index) {\r\n            alert('this feature is not implemented yet, sorry. it will be added some day...');\r\n        };\r\n\r\n        // edit needs the Guid - the index isn't important\r\n        $scope.edit = function (itemGuid, index) {\r\n            if (itemGuid === null)\r\n                return alert('no can do'); // todo: i18n\r\n            var entities = $filter(\"filter\")($scope.availableEntities, { Value: itemGuid });\r\n            var id = entities[0].Id;\r\n\r\n            eavAdminDialogs.openItemEditWithEntityId(id, $scope.getAvailableEntities);\r\n        };\r\n\r\n        // Initialize entities\r\n        $scope.getAvailableEntities();\r\n\r\n    }]).directive('entityValidation', [function() {\r\n        return {\r\n            restrict: 'A',\r\n            require: '?ngModel',\r\n            link: function(scope, element, attrs, ngModel) {\r\n                if (!ngModel) return;\r\n\r\n                ngModel.$validators.required = function (modelValue, viewValue) {\r\n\r\n                    if (!scope.$parent.$parent.to.required)\r\n                        return true;\r\n                    var value = modelValue || viewValue;\r\n                    if (!value || !Array.isArray(value))\r\n                        return true;\r\n                    return value.length > 0;\r\n                };\r\n\r\n                scope.$watch(function () {\r\n                    return ngModel.$viewValue;\r\n                }, function (newValue) {\r\n                    ngModel.$validate();\r\n                }, true);\r\n            }\r\n        };\r\n    }]);\r\n\n/* \r\n * Field: Number - Default\r\n */\r\n\r\nangular.module(\"eavFieldTemplates\")\r\n    .config([\"formlyConfigProvider\", \"defaultFieldWrappers\", function (formlyConfigProvider, defaultFieldWrappers) {\r\n        formlyConfigProvider.setType({\r\n            name: \"number-default\",\r\n            template: \"<input type=\\\"number\\\" class=\\\"form-control input-lg\\\" ng-model=\\\"value.Value\\\">{{vm.isGoogleMap}}\",\r\n            wrapper: defaultFieldWrappers,\r\n            defaultOptions: {\r\n                ngModelAttrs: {\r\n                    '{{to.settings.merged.Min}}': { value: \"min\" },\r\n                    '{{to.settings.merged.Max}}': { value: \"max\" },\r\n                    '{{to.settings.merged.Decimals ? \"^[0-9]+(\\.[0-9]{1,\" + to.settings.merged.Decimals + \"})?$\" : null}}': { value: \"pattern\" }\r\n                }\r\n            },\r\n            controller: \"FieldTemplate-NumberCtrl as vm\"\r\n        });\r\n    }]).controller(\"FieldTemplate-NumberCtrl\", function () {\r\n        var vm = this;\r\n    });\n/* \r\n * Field: String - Default\r\n */\r\n\r\nangular.module(\"eavFieldTemplates\")\r\n    .config([\"formlyConfigProvider\", \"defaultFieldWrappers\", function (formlyConfigProvider, defaultFieldWrappers) {\r\n\r\n        formlyConfigProvider.setType({\r\n            name: \"string-default\",\r\n            template: \"<div><input class=\\\"form-control input-lg\\\" ng-if=\\\"!(options.templateOptions.settings.merged.RowCount > 1)\\\" ng-pattern=\\\"vm.regexPattern\\\" ng-model=\\\"value.Value\\\">\" +\r\n                \"<textarea ng-if=\\\"options.templateOptions.settings.merged.RowCount > 1\\\" rows=\\\"{{options.templateOptions.settings.merged.RowCount}}\\\" class=\\\"form-control input-lg\\\" ng-model=\\\"value.Value\\\"></textarea></div>\",\r\n            wrapper: defaultFieldWrappers, \r\n            controller: \"FieldTemplate-StringCtrl as vm\"\r\n        });\r\n\r\n    }]).controller(\"FieldTemplate-StringCtrl\", [\"$scope\", function ($scope) {\r\n        var vm = this;\r\n        var validationRegexString = \".*\";\r\n        var stringSettings = $scope.options.templateOptions.settings.merged;\r\n        if (stringSettings && stringSettings.ValidationRegExJavaScript)\r\n            validationRegexString = stringSettings.ValidationRegExJavaScript;\r\n        vm.regexPattern = new RegExp(validationRegexString, 'i');\r\n\r\n        console.log($scope.options.templateOptions);\r\n    }]);\n/* \r\n * Field: String - Dropdown\r\n */\r\n\r\nangular.module(\"eavFieldTemplates\")\r\n    .config([\"formlyConfigProvider\", \"defaultFieldWrappers\", function (formlyConfigProvider, defaultFieldWrappers) {\r\n\r\n        formlyConfigProvider.setType({\r\n            name: \"string-dropdown\",\r\n            template: \"<select class=\\\"form-control input-lg\\\" ng-model=\\\"value.Value\\\"></select>\",\r\n            wrapper: defaultFieldWrappers,\r\n            defaultOptions: function defaultOptions(options) {\r\n\r\n                // DropDown field: Convert string configuration for dropdown values to object, which will be bound to the select\r\n                if (options.templateOptions.settings && options.templateOptions.settings.merged && options.templateOptions.settings.merged.DropdownValues) {\r\n                    var o = options.templateOptions.settings.merged.DropdownValues;\r\n                    o = o.replace(/\\r/g, \"\").split(\"\\n\");\r\n                    o = o.map(function (e, i) {\r\n                        var s = e.split(\":\");\r\n                        return {\r\n                            name: s[0],\r\n                            value: (s[1] || s[1] === '') ? s[1] : s[0]\r\n                        };\r\n                    });\r\n                    options.templateOptions.options = o;\r\n                }\r\n\r\n                function _defineProperty(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); }\r\n\r\n                var ngOptions = options.templateOptions.ngOptions || \"option[to.valueProp || 'value'] as option[to.labelProp || 'name'] group by option[to.groupProp || 'group'] for option in to.options\";\r\n                return {\r\n                    ngModelAttrs: _defineProperty({}, ngOptions, {\r\n                        value: \"ng-options\"\r\n                    })\r\n                };\r\n\r\n            }\r\n        });\r\n    }]);\n/* \r\n * Field: String - url-item\r\n */\r\n\r\nangular.module(\"eavFieldTemplates\")\r\n    .config([\"formlyConfigProvider\", \"defaultFieldWrappers\", function(formlyConfigProvider, defaultFieldWrappers) {\r\n\r\n        formlyConfigProvider.setType({\r\n            name: \"string-url-path\",\r\n            template: \"<div><input class=\\\"form-control input-lg\\\" only-simple-url-chars ng-pattern=\\\"vm.regexPattern\\\" ng-model=\\\"value.Value\\\" ng-blur=\\\"vm.finalClean()\\\"></div>\",\r\n            wrapper: defaultFieldWrappers,\r\n            controller: \"FieldTemplate-String-Url-Item-Ctrl as vm\"\r\n        });\r\n\r\n    }]).controller(\"FieldTemplate-String-Url-Item-Ctrl\", [\"$scope\", \"debugState\", \"stripNonUrlCharacters\", function($scope, debugState, stripNonUrlCharacters) {\r\n        var vm = this;\r\n\r\n        // get configured\r\n        var controlSettings = $scope.to.settings[\"string-url-path\"];\r\n        var sourceMask = (controlSettings) ? controlSettings.AutoGenerateMask || null : null;\r\n\r\n        // test values\r\n        //sourceMask = \"[Name]\";\r\n        //autoGenerateLink = true;\r\n\r\n        //#region Field-Mask handling \r\n        vm.lastAutoCopy = \"\";\r\n        vm.sourcesChangedTryToUpdate = function sourcesChangedTryToUpdate() {\r\n            // don't do anything if the current field is not empty and doesn't have the last copy of the stripped value\r\n            if($scope.value && $scope.value.Value && $scope.value.Value !== vm.lastAutoCopy)\r\n                return;\r\n            \r\n            var orig = vm.getFieldContentBasedOnMask(sourceMask);\r\n            var cleaned = stripNonUrlCharacters(orig, false, true);\r\n            if (cleaned) {\r\n                vm.lastAutoCopy = cleaned;\r\n                $scope.value.Value = cleaned;\r\n            }\r\n        }\r\n\r\n        vm.maskRegEx = /\\[.*?\\]/ig;\r\n        vm.getFieldContentBasedOnMask = function getNewAutoValue(mask) {\r\n            angular.forEach(vm.getFieldsOfMask(mask), function (e, i) {\r\n                var replaceValue = ($scope.model.hasOwnProperty(e) && $scope.model[e] && $scope.model[e]._currentValue && $scope.model[e]._currentValue.Value)\r\n                    ? $scope.model[e]._currentValue.Value : \"\";\r\n                mask = mask.replace(e, replaceValue);\r\n            });\r\n\r\n            return mask;\r\n        };\r\n\r\n        vm.getFieldsOfMask = function (mask) {\r\n            var result = [];\r\n            if (!mask) return \"\";\r\n            var matches = mask.match(vm.maskRegEx);\r\n            angular.forEach(matches, function (e, i) {\r\n                var staticName = e.replace(/[\\[\\]]/ig, \"\");\r\n                result.push(staticName);\r\n            });\r\n            return result;\r\n        };\r\n        //#endregion \r\n\r\n\r\n        //#region enforce custom regex - copied from string-default\r\n        var validationRegexString = \".*\";\r\n        var stringSettings = $scope.options.templateOptions.settings.merged;\r\n        if (stringSettings && stringSettings.ValidationRegExJavaScript)\r\n            validationRegexString = stringSettings.ValidationRegExJavaScript;\r\n        vm.regexPattern = new RegExp(validationRegexString, \"i\");\r\n\r\n        //#endregion\r\n\r\n        //#region do final cleaning; mainly remove trailing \"/\"\r\n        vm.finalClean = function() {\r\n            var orig = $scope.value.Value;\r\n            var cleaned = stripNonUrlCharacters(orig, false, true);\r\n            if (orig !== cleaned)\r\n                $scope.value.Value = cleaned;\r\n        };\r\n        //#endregion\r\n\r\n        vm.activate = function() {\r\n            // add a watch for each field in the field-mask\r\n            angular.forEach(vm.getFieldsOfMask(sourceMask), function(e, i) {\r\n                $scope.$watch(\"model.\" + e + \"._currentValue.Value\", function() {\r\n                    if (debugState.on) console.log(\"url-path: \" + e + \" changed...\");\r\n                    vm.sourcesChangedTryToUpdate(sourceMask);\r\n                });\r\n            });\r\n\r\n            $scope.debug = debugState;\r\n            if (debugState.on) console.log($scope.options.templateOptions);\r\n        };\r\n        vm.activate();\r\n\r\n    }])\r\n\r\n    // this is a helper which cleans up the url and is used in various places\r\n    .factory(\"stripNonUrlCharacters\", function() {\r\n        return function(inputValue, allowPath, trimEnd) {\r\n            if (inputValue == null)\r\n                return \"\";\r\n            var rexAllowed = /[^a-z0-9-_]/gi,\r\n                rexSeparators = /[^a-z0-9-_]+/gi,\r\n                rexMult = /-+/gi,\r\n                rexTrim = trimEnd ? /^-|-+$/gi : /^-/gi;\r\n            // allow only lower-case, numbers and _/- characters\r\n            var cleanInputValue = inputValue.replace(rexSeparators, \"-\");\r\n            cleanInputValue = cleanInputValue.replace(rexMult, \"-\");\r\n            cleanInputValue = cleanInputValue.replace(rexAllowed, \"\"); ///[^\\w\\s]/gi, '');\r\n            cleanInputValue = cleanInputValue.replace(rexTrim, \"\");\r\n            return cleanInputValue;\r\n        }\r\n    })\r\n\r\n    // this monitors an input-field and ensures that only allowed characters are typed\r\n    .directive(\"onlySimpleUrlChars\", [\"stripNonUrlCharacters\", function(stripNonUrlCharacters) {\r\n        return {\r\n            require: \"ngModel\",\r\n            restrict: \"A\",\r\n            link: function(scope, element, attrs, modelCtrl) {\r\n                modelCtrl.$parsers.push(function(inputValue) {\r\n                    if (inputValue == null)\r\n                        return \"\";\r\n                    var cleanInputValue = stripNonUrlCharacters(inputValue, false, false);\r\n\r\n                    if (cleanInputValue !== inputValue) {\r\n                        modelCtrl.$setViewValue(cleanInputValue);\r\n                        modelCtrl.$render();\r\n                    }\r\n                    return cleanInputValue;\r\n                });\r\n            }\r\n        }\r\n    }]);\r\n\n/* global angular */\r\n(function () {\r\n    /* jshint laxbreak:true*/\r\n    \"use strict\";\r\n\r\n    var app = angular.module(\"eavEditEntity\");\r\n\r\n    // The controller for the main form directive\r\n    app.controller(\"EditEntities\", [\"appId\", \"$http\", \"$scope\", \"entitiesSvc\", \"toastr\", \"saveToastr\", \"$translate\", \"debugState\", \"ctrlS\", function editEntityCtrl(appId, $http, $scope, entitiesSvc, toastr, saveToastr, $translate, debugState, ctrlS) {\r\n\r\n        var vm = this;\r\n        vm.debug = debugState;\r\n        vm.isWorking = 0;           // isWorking is > 0 when any $http request runs\r\n        vm.registeredControls = []; // array of input-type controls used in these forms\r\n        vm.items = null;            // array of items to edit\r\n        vm.willPublish = false;     // default is won't publish, but will usually be overridden\r\n\r\n        //#region activate / deactivate + bindings\r\n        // the activate-command, to intialize everything. Must be called later, when all methods have been attached\r\n        function activate() {\r\n            // bind ctrl+S\r\n            vm.saveShortcut = ctrlS(function () { vm.save(); });\r\n\r\n            // load all data\r\n            vm.loadAll();\r\n        }\r\n\r\n        // clean-up call when the dialog is closed\r\n        function deactivate() {\r\n            vm.saveShortcut.unbind();\r\n        }\r\n\r\n        // bind the clean-up call to when the dialog is removed\r\n        $scope.$on(\"$destroy\", function () {\r\n            deactivate();\r\n        });\r\n        //#endregion\r\n\r\n        // add an additional input-type control for lazy-loading etc.\r\n        vm.registerEditControl = function (control) {\r\n            vm.registeredControls.push(control);\r\n        };\r\n\r\n        //#region load / save\r\n\r\n        // load all data\r\n        vm.loadAll = function() {\r\n            entitiesSvc.getManyForEditing(appId, $scope.itemList)\r\n                .then(function(result) {\r\n                    vm.items = result.data;\r\n                    angular.forEach(vm.items, function(v, i) {\r\n\r\n                        // If the entity is null, it does not exist yet. Create a new one\r\n                        if (!vm.items[i].Entity && !!vm.items[i].Header.ContentTypeName)\r\n                            vm.items[i].Entity = entitiesSvc.newEntity(vm.items[i].Header);\r\n\r\n                        vm.items[i].Entity = enhanceEntity(vm.items[i].Entity);\r\n\r\n                        // set slot value - must be inverte for boolean-switch\r\n                        var grp = vm.items[i].Header.Group;\r\n                        vm.items[i].slotIsUsed = (grp === null\r\n                            || grp.SlotIsEmpty !== true);\r\n                    });\r\n                    vm.willPublish = vm.items[0].Entity.IsPublished;\r\n                });\r\n        };\r\n\r\n        vm.showFormErrors = function() {\r\n                var errors = vm.formErrors();\r\n                var msgs = [], msgTemplate = $translate.instant(\"Message.FieldErrorList\");\r\n                for (var set = 0; set < errors.length; set++) {\r\n                    if (errors[set].required) {\r\n                        var req = errors[set].required.map(function (itm) { return { field: itm.$name, error: \"required\" }; });\r\n                        msgs = msgs.concat(req);\r\n                    }\r\n                }\r\n                var nice = msgs.map(function (err) {\r\n                    var specs = err.field.split(\"_\");\r\n\r\n                    return msgTemplate.replace(\"{form}\", specs[1])\r\n                        .replace(\"{field}\", specs[3])\r\n                        .replace(\"{error}\", err.error);\r\n                });\r\n            var msg = nice.join(\"<br/>\");\r\n            return toastr.error($translate.instant(\"Message.CantSaveInvalid\").replace(\"{0}\", msg),\r\n                $translate.instant(\"Message.Error\"), { allowHtml: true }); \r\n        };\r\n\r\n        // the save-call\r\n        vm.save = function (close) {\r\n            // check if saving is allowed\r\n            if (!vm.isValid()) \r\n                return vm.showFormErrors();\r\n\r\n            if (vm.isWorking > 0)\r\n                return toastr.error($translate.instant(\"Message.CantSaveProcessing\")); // todo: i18n\r\n\r\n            // save\r\n            vm.isWorking++;\r\n            saveToastr(entitiesSvc.saveMany(appId, vm.items)).then(function (result) {\r\n                $scope.state.setPristine();\r\n                if (close)\r\n                    vm.afterSaveEvent(result);\r\n                vm.isWorking--;\r\n            }, function errorWhileSaving(response) {\r\n                vm.isWorking--;\r\n            });\r\n        };\r\n\r\n        // things to do after saving\r\n        vm.afterSaveEvent = $scope.afterSaveEvent;\r\n\r\n        //#endregion\r\n\r\n        //#region state check/set for valid/dirty/pristine\r\n        // check if form is valid\r\n        vm.isValid = function () {\r\n            var valid = true;\r\n            angular.forEach(vm.registeredControls, function (e, i) {\r\n                if (!e.isValid())\r\n                    valid = false;\r\n            });\r\n            return valid;\r\n        };\r\n\r\n        vm.formErrors = function () {\r\n            var list = [];\r\n            angular.forEach(vm.registeredControls, function (e, i) {\r\n                if (!e.isValid())\r\n                    list.push(e.error());\r\n            });\r\n            return list;\r\n        };\r\n\r\n        // check if dirty\r\n        $scope.state.isDirty = function() {\r\n            var dirty = false;\r\n            angular.forEach(vm.registeredControls, function(e, i) {\r\n                if (e.isDirty())\r\n                    dirty = true;\r\n            });\r\n            return dirty;\r\n        };\r\n\r\n        // set to not-dirty (pristine)\r\n        $scope.state.setPristine = function() {\r\n            angular.forEach(vm.registeredControls, function(e, i) {\r\n                e.setPristine();\r\n            });\r\n        };\r\n        //#endregion\r\n\r\n        // monitor for changes in publish-state and set it for all items being edited\r\n        $scope.$watch('vm.willPublish', function (newValue, oldValue) {\r\n            angular.forEach(vm.items, function (v, i) {\r\n                vm.items[i].Entity.IsPublished = vm.willPublish;\r\n            });\r\n        });\r\n\r\n        /// toggle / change if a section (slot) is in use or not (like an unused presentation)\r\n        vm.toggleSlotIsEmpty = function (item) {\r\n            if (!item.Header.Group)\r\n                item.Header.Group = {};\r\n            item.Header.Group.SlotIsEmpty = !item.Header.Group.SlotIsEmpty;\r\n            item.slotIsUsed = !item.Header.Group.SlotIsEmpty;\r\n        };\r\n\r\n        activate();\r\n\r\n    }]);\r\n\r\n\r\n\r\n})();\n\r\n(function () {\r\n    \"use strict\";\r\n\r\n    var app = angular.module(\"eavEditEntity\");\r\n\r\n    app.directive(\"eavEditEntities\", function () {\r\n        return {\r\n            templateUrl: \"form/edit-many-entities.html\",\r\n            restrict: \"E\",\r\n            scope: {\r\n                itemList: \"=\",\r\n                afterSaveEvent: \"=\",\r\n                state: \"=\"\r\n            },\r\n            controller: \"EditEntities\",\r\n            controllerAs: \"vm\"\r\n        };\r\n    });\r\n\r\n\r\n})();\n\r\n(function () {\r\n    /* jshint laxbreak:true */\r\n\t\"use strict\";\r\n\r\n\tvar app = angular.module(\"eavEditEntity\"); \r\n\r\n\t// The controller for the main form directive\r\n\tapp.controller(\"EditEntityFormCtrl\", [\"appId\", \"$http\", \"$scope\", \"formlyConfig\", \"contentTypeFieldSvc\", \"$sce\", \"debugState\", \"customInputTypes\", \"eavConfig\", function editEntityCtrl(appId, $http, $scope, formlyConfig, contentTypeFieldSvc, $sce, debugState, customInputTypes, eavConfig) {\r\n\r\n\t\tvar vm = this;\r\n\t\tvm.editInDefaultLanguageFirst = function () {\r\n\t\t\treturn false; // ToDo: Use correct language information, e.g. eavLanguageService.currentLanguage != eavLanguageService.defaultLanguage && !$scope.entityId;\r\n\t\t};\r\n\r\n\t\t// The control object is available outside the directive\r\n\t\t// Place functions here that should be available from the parent of the directive\r\n\t\tvm.control = {\r\n\t\t    isValid: function () { return vm.formFields.length === 0 || vm.form && vm.form.$valid; },\r\n\t\t    isDirty: function () { return (vm.form && vm.form.$dirty); },\r\n\t\t    setPristine: function () { if (vm.form) vm.form.$setPristine(); },\r\n            error: function () { return vm.form.$error; }\r\n\t\t};\r\n\r\n\t\t// Register this control in the parent control\r\n\t\tif($scope.registerEditControl)\r\n\t\t\t$scope.registerEditControl(vm.control);\r\n\r\n\t\tvm.model = null;\r\n\t\tvm.entity = $scope.entity;\r\n\r\n\t\tvm.formFields = [];\r\n\r\n\r\n\t\tvar loadContentType = function () {\r\n\r\n\t\t    contentTypeFieldSvc(appId, { StaticName: vm.entity.Type.StaticName }).getFields()\r\n\t\t        .then(function(result) {\r\n\t\t            vm.debug = result;\r\n\r\n\t\t            // Transform EAV content type configuration to formFields (formly configuration)\r\n\r\n                    // first: add all custom types to re-load these scripts and styles\r\n\t\t            angular.forEach(result.data, function (e, i) {\r\n\t\t                // check in config input-type replacement map if the specified type should be replaced by another\r\n\t\t                //if (e.InputType && eavConfig.formly.inputTypeReplacementMap[e.InputType]) \r\n\t\t                //    e.InputType = eavConfig.formly.inputTypeReplacementMap[e.InputType];\r\n\r\n\r\n\t\t                // review type and get additional configs!\r\n\t\t                e.InputType = vm.getType(e);\r\n\t\t                eavConfig.formly.inputTypeReconfig(e);  // provide custom overrides etc. if necessary\r\n\r\n\t\t                if (e.InputTypeConfig)\r\n\t\t                    customInputTypes.addInputType(e);\r\n\t\t            });\r\n\r\n\t\t            // load all assets before continuing with formly-binding\r\n\t\t            var promiseToLoad = customInputTypes.loadWithPromise();\r\n\t\t            promiseToLoad.then(function(dependencyResult) {\r\n\t\t                vm.registerAllFieldsFromReturnedDefinition(result);\r\n\t\t            });\r\n\r\n\r\n\t\t        });\r\n\t\t};\r\n\r\n\t    vm.registerAllFieldsFromReturnedDefinition = function raffrd(result) {\r\n\t        var lastGroupHeadingId = 0;\r\n\t        angular.forEach(result.data, function (e, i) {\r\n\r\n\t            if (e.Metadata.All === undefined)\r\n\t                e.Metadata.All = {};\r\n\r\n\t            var fieldType = e.InputType;\r\n\r\n\t            // always remember the last heading so all the following fields know to look there for collapse-setting\r\n\t            var isFieldHeading = (fieldType === \"empty-default\");\r\n\t            if (isFieldHeading)\r\n\t                lastGroupHeadingId = i;\r\n                \r\n\t            var nextField = {\r\n\t                key: e.StaticName,\r\n\t                type: fieldType,\r\n\t                templateOptions: {\r\n\t                    required: !!e.Metadata.All.Required,\r\n\t                    label: e.Metadata.All.Name === undefined ? e.StaticName : e.Metadata.All.Name,\r\n\t                    description: $sce.trustAsHtml(e.Metadata.All.Notes),\r\n\t                    settings: e.Metadata,\r\n\t                    header: $scope.header,\r\n\t                    canCollapse: lastGroupHeadingId > 0 && !isFieldHeading,\r\n\t                    fieldGroup: vm.formFields[lastGroupHeadingId],\r\n\t                    disabled: e.Metadata.All.Disabled,\r\n\t                    langReadOnly: false // Will be set by the language directive to override the disabled state\r\n\t                },\r\n\t                className: \"type-\" + e.Type.toLowerCase() + \" input-\" + fieldType + \" field-\" + e.StaticName.toLowerCase(),\r\n\t                hide: (e.Metadata.All.VisibleInEditUI === false ? !debugState.on : false),\r\n\t                expressionProperties: {\r\n\t                    // Needed for dynamic update of the disabled property\r\n\t                    'templateOptions.disabled': 'options.templateOptions.disabled' // doesn't set anything, just here to ensure formly causes update-binding\r\n\t                },\r\n\t                watcher: [\r\n                        {\r\n                            // changes when a entity becomes enabled / disabled\r\n                            expression: function (field, scope, stop) {\r\n                                return e.Metadata.All.Disabled ||\r\n                                    (field.templateOptions.header.Group && field.templateOptions.header.Group.SlotIsEmpty) ||\r\n                                    field.templateOptions.langReadOnly;\r\n                            },\r\n                            listener: function (field, newValue, oldValue, scope, stopWatching) {\r\n                                field.templateOptions.disabled = newValue;\r\n                            }\r\n                        },\r\n                        {\r\n                            // handle collapse / open\r\n                            expression: function (field, scope, stop) {\r\n                                // only change values if it can collapse...\r\n                                return (field.templateOptions.canCollapse) ? field.templateOptions.fieldGroup.templateOptions.collapseGroup : null;\r\n                            },\r\n                            listener: function (field, newValue, oldValue, scope, stopWatching) {\r\n                                if (field.templateOptions.canCollapse)\r\n                                    field.templateOptions.collapse = newValue;\r\n                            }\r\n                        }\r\n\t                ]\r\n\t            };\r\n\r\n\t            vm.formFields.push(nextField);\r\n\t        });\r\n\t    };\r\n\r\n\r\n\t    // Load existing entity if defined\r\n\t\tif (vm.entity !== null)\r\n\t\t    loadContentType();\r\n\r\n\r\n\t    // Returns the field type for an attribute configuration\r\n\t\tvm.getType = function (attributeConfiguration) {\r\n\t\t    var e = attributeConfiguration;\r\n\t\t    var type = e.Type.toLowerCase();\r\n\t\t    var inputType = \"\";\r\n\r\n\t\t    // new: the All can - and should - have an input-type which doesn't change\r\n\t\t    // First look in Metadata.All if an InputType is defined (All should override the setting, which is not the case when using only merged)\r\n\t\t    if (e.InputType !== \"unknown\") // the input type of @All is here from the web service // Metadata.All && e.Metadata.All.InputType)\r\n\t\t        inputType = e.InputType;\r\n\t\t        // If not, look in merged\r\n\t\t    else if (e.Metadata.merged && e.Metadata.merged.InputType)\r\n\t\t        inputType = e.Metadata.merged.InputType;\r\n\r\n\t\t    if (inputType && inputType.indexOf(\"-\") === -1) // has input-type, but missing main type, this happens with old types like string wysiyg\r\n\t\t        inputType = type + \"-\" + inputType;\r\n\r\n\t\t    var willBeRewrittenByConfig = (inputType && eavConfig.formly.inputTypeReplacementMap[inputType]);\r\n\t\t    if (!willBeRewrittenByConfig) {\r\n\t\t        // this type may have assets, so the definition may be late-loaded\r\n\t\t        var typeAlreadyRegistered = formlyConfig.getType(inputType);    // check if this input-type actually exists - so \"string-i-made-this-up\" will return undefined\r\n\t\t        var typeWillRegisterLaterWithAssets = (e.InputTypeConfig ? !!e.InputTypeConfig.Assets : false); // if it will load assets later, then it may still be defined then\r\n\r\n\t\t        // Use subtype 'default' if none is specified - or type does not exist\r\n\t\t        if (!inputType || (!typeAlreadyRegistered && !typeWillRegisterLaterWithAssets))\r\n\t\t            inputType = type + \"-default\";\r\n\r\n\t\t        // but re-check if it's in the config! since the name might have changed\r\n\t\t        willBeRewrittenByConfig = (inputType && eavConfig.formly.inputTypeReplacementMap[inputType]);\r\n\t\t    }\r\n\r\n\t\t    // check in config input-type replacement map if the specified type should be replaced by another\r\n\t\t    // like \"string-wysiwyg\" replaced by \"string-wysiwyg-tinymce\"\r\n\t\t    if (willBeRewrittenByConfig)\r\n\t\t        inputType = eavConfig.formly.inputTypeReplacementMap[inputType];\r\n\r\n\t\t    return (inputType);\r\n\t\t};\r\n\t}]);\r\n    \r\n\t\r\n\r\n})();\n\r\n(function () {\r\n\t\"use strict\";\r\n\r\n\tangular.module(\"eavEditEntity\")\r\n        .directive(\"eavEditEntityForm\", function () {\r\n\t\treturn {\r\n\t\t    templateUrl: \"form/edit-single-entity.html\",\r\n\t\t\trestrict: \"E\",\r\n\t\t\tscope: {\r\n\t\t\t    entity: \"=\",\r\n                header: \"=\",\r\n                registerEditControl: \"=\"\r\n\t\t\t},\r\n\t\t\tcontroller: \"EditEntityFormCtrl\",\r\n\t\t\tcontrollerAs: \"vm\"\r\n\t\t};\r\n\t});\r\n\t\r\n\r\n})();\n/* global angular */\r\n(function () {\r\n\t\"use strict\";\r\n\r\n\tvar app = angular.module(\"eavEditEntity\");\r\n\r\n\t// The controller for the main form directive\r\n\tapp.controller(\"EditEntityWrapperCtrl\", [\"$q\", \"$http\", \"$scope\", \"items\", \"$modalInstance\", \"$window\", \"$translate\", function editEntityCtrl($q, $http, $scope, items, $modalInstance, $window, $translate) {\r\n\r\n\t    var vm = this;\r\n\t    vm.itemList = items;\r\n\r\n\t    // this is the callback after saving - needed to close everything\r\n\t    vm.afterSave = function(result) {\r\n\t        if (result.status === 200)\r\n\t            vm.close(result);\r\n\t        else {\r\n\t            alert($translate.instant(\"Errors.UnclearError\"));\r\n\t        }\r\n\t    };\r\n\r\n\t    vm.state = {\r\n\t        isDirty: function() {\r\n\t            throw $translate.instant(\"Errors.InnerControlMustOverride\");\r\n\t        }\r\n\t    };\r\n\r\n\t    vm.close = function (result) {\r\n\t\t    $modalInstance.close(result);\r\n\t\t};\r\n\r\n\r\n\t    vm.maybeLeave = function maybeLeave(e) {\r\n\t        var unsavedChangesText = $translate.instant(\"Errors.UnsavedChanges\");\r\n\t        if (vm.state.isDirty() && !confirm(unsavedChangesText + \" \" + $translate.instant(\"Message.ExitOk\")))\r\n\t            e.preventDefault();\r\n\t    };\r\n\r\n\t    $scope.$on('modal.closing', vm.maybeLeave);\r\n\t    $window.addEventListener('beforeunload', function (e) {\r\n\t        var unsavedChangesText = $translate.instant(\"Errors.UnsavedChanges\");\r\n\t        if (vm.state.isDirty()) {\r\n\t            (e || window.event).returnValue = unsavedChangesText; //Gecko + IE\r\n\t            return unsavedChangesText; //Gecko + Webkit, Safari, Chrome etc.\r\n\t        }\r\n\t        return null;\r\n\t    });\r\n\t}]);\r\n\r\n})();\n\r\n(function () {\r\n\t\"use strict\";\r\n\r\n\r\n\t/* This app handles all aspectes of the multilanguage features of the field templates */\r\n\r\n\tvar eavLocalization = angular.module(\"eavLocalization\", [\"formly\", \"EavConfiguration\"], [\"formlyConfigProvider\", function (formlyConfigProvider) {\r\n\r\n\t\t// Field templates that use this wrapper must bind to value.Value instead of model[...]\r\n\t\tformlyConfigProvider.setWrapper([\r\n\t\t\t{\r\n\t\t\t\tname: \"eavLocalization\",\r\n\t\t\t\ttemplateUrl: \"localization/formly-localization-wrapper.html\"\r\n\t\t\t}\r\n\t\t]);\r\n\r\n\t}]);\r\n\r\n\teavLocalization.directive(\"eavLanguageSwitcher\", function () {\r\n\t\treturn {\r\n\t\t\trestrict: \"E\",\r\n\t\t\ttemplateUrl: \"localization/language-switcher.html\",\r\n\t\t\tcontroller: [\"$scope\", \"languages\", function($scope, languages) {\r\n\t\t\t\t$scope.languages = languages;\r\n\t\t\t}],\r\n\t\t\tscope: {\r\n\t\t\t    isDisabled: \"=isDisabled\"\r\n\t\t\t}\r\n\t\t};\r\n\t});\r\n\r\n\teavLocalization.directive(\"eavLocalizationScopeControl\", function () {\r\n\t\treturn {\r\n\t\t\trestrict: \"E\",\r\n\t\t\ttransclude: true,\r\n\t\t\ttemplate: \"\",\r\n\t\t\tlink: function (scope, element, attrs) {\r\n\t\t\t},\r\n\t\t\tcontroller: [\"$scope\", \"$filter\", \"$translate\", \"eavDefaultValueService\", \"languages\", function ($scope, $filter, $translate, eavDefaultValueService, languages) { // Can't use controllerAs because of transcluded scope\r\n\r\n\t\t\t\tvar scope = $scope;\r\n\t\t\t\tvar langConf = languages;\r\n\r\n\t\t\t\tvar initCurrentValue = function() {\r\n\r\n\t\t\t\t\t// Set base value object if not defined\r\n\t\t\t\t\tif (!scope.model[scope.options.key])\r\n\t\t\t\t\t\tscope.model.addAttribute(scope.options.key);\r\n\r\n\t\t\t\t\tvar fieldModel = scope.model[scope.options.key];\r\n\r\n\t\t\t\t\t// If current language = default language and there are no values, create an empty value object\r\n\t\t\t\t\tif (fieldModel.Values.length === 0) {\r\n\t\t\t\t\t    if (langConf.currentLanguage == langConf.defaultLanguage) {\r\n\t\t\t\t\t        var defaultValue = eavDefaultValueService(scope.options);\r\n                            // Add default language if we are in a ml environment, else don't add any\r\n\t\t\t\t\t        var languageToAdd = langConf.languages.length > 0 ? langConf.currentLanguage : null;\r\n\t\t\t\t\t        fieldModel.addVs(defaultValue, languageToAdd);\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t    else { // There are no values - value must be edited in default language first\r\n\t\t\t\t\t        return;\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t    // Assign default language if no dimension is set - new: if multiple languages are in use!!!\r\n\t\t\t\t\tif (Object.keys(fieldModel.Values[0].Dimensions).length === 0)\r\n                        if(langConf.languages.length > 0)\r\n\t\t\t\t            fieldModel.Values[0].Dimensions[langConf.defaultLanguage] = false; // set to \"not-read-only\"\r\n\r\n\t\t\t\t\tvar valueToEdit;\r\n\r\n\t\t\t\t\t// Decide which value to edit:\r\n\t\t\t\t\t// 1. If there is a value with current dimension on it, use it\r\n\t\t\t\t\tvalueToEdit = $filter(\"filter\")(fieldModel.Values, function(v, i) {\r\n\t\t\t\t\t\treturn v.Dimensions[langConf.currentLanguage] !== undefined;\r\n\t\t\t\t\t})[0];\r\n\r\n\t\t\t\t\t// 2. Use default language value\r\n\t\t\t\t\tif (valueToEdit === undefined)\r\n\t\t\t\t\t\tvalueToEdit = $filter(\"filter\")(fieldModel.Values, function(v, i) {\r\n\t\t\t\t\t\t\treturn v.Dimensions[langConf.defaultLanguage] !== undefined;\r\n\t\t\t\t\t\t})[0];\r\n\r\n\t\t\t\t\t// 3. Use the first value if there is only one\r\n\t\t\t\t\tif (valueToEdit === undefined) {\r\n\t\t\t\t\t\tif (fieldModel.Values.length > 1)\r\n\t\t\t\t\t\t    throw $translate.instant(\"Errors.DefLangNotFound\") + \" \" + $scope.options.key;\r\n\t\t\t\t\t\t// Use the first value\r\n\t\t\t\t\t\tvalueToEdit = fieldModel.Values[0];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfieldModel._currentValue = valueToEdit;\r\n\r\n\t\t\t\t\t// Set scope variable 'value' to simplify binding\r\n\t\t\t\t\tscope.value = fieldModel._currentValue;\r\n\r\n\t\t\t\t    // Decide whether the value is writable or not\r\n\t\t\t\t\tvar writable = (langConf.currentLanguage == langConf.defaultLanguage) ||\r\n                        (scope.value && scope.value.Dimensions[langConf.currentLanguage] === false);\r\n\r\n\t\t\t\t\tscope.to.langReadOnly = !writable;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tinitCurrentValue();\r\n\r\n\t\t\t\t// Handle language switch\r\n\t\t\t\tscope.langConf = langConf; // Watch does only work on scope variables\r\n\t\t\t\tscope.$watch(\"langConf.currentLanguage\", function (newValue, oldValue) {\r\n\t\t\t\t\tif (oldValue === undefined || newValue == oldValue)\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\tinitCurrentValue();\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// ToDo: Could cause performance issues (deep watch array)...\r\n\t\t\t\tscope.$watch(\"model[options.key].Values\", function(newValue, oldValue) {\r\n\t\t\t\t\tinitCurrentValue();\r\n\t\t\t\t}, true);\r\n\r\n\t\t\t\t// The language menu must be able to trigger an update of the _currentValue property\r\n\t\t\t\tscope.model[scope.options.key]._initCurrentValue = initCurrentValue;\r\n\t\t\t}]\r\n\t\t};\r\n\t});\r\n\r\n\teavLocalization.directive(\"eavLocalizationMenu\", function () {\r\n\t\treturn {\r\n\t\t\trestrict: \"E\",\r\n\t\t\tscope: {\r\n\t\t\t\tfieldModel: \"=fieldModel\",\r\n\t\t\t\toptions: \"=options\",\r\n\t\t\t\tvalue: \"=value\",\r\n\t\t\t\tindex: \"=index\",\r\n                formModel: \"=formModel\"\r\n\t\t\t},\r\n\t\t\ttemplateUrl: \"localization/localization-menu.html\",\r\n\t\t\tlink: function (scope, element, attrs) { },\r\n\t\t\tcontrollerAs: \"vm\",\r\n\t\t\tcontroller: [\"$scope\", \"languages\", \"$translate\", function ($scope, languages, $translate) {\r\n\r\n\t\t\t    var vm = this;\r\n\t\t\t    var lblDefault = $translate.instant(\"LangMenu.UseDefault\");\r\n\t\t\t    var lblIn = $translate.instant(\"LangMenu.In\");\r\n\r\n\t\t\t\tvm.fieldModel = $scope.fieldModel;\r\n\t\t\t\tvm.languages = languages;\r\n\t\t\t\tvm.hasLanguage = function(languageKey) {\r\n\t\t\t\t    return vm.fieldModel.getVsWithLanguage(languageKey) !== null;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvm.isDefaultLanguage = function () { return languages.currentLanguage != languages.defaultLanguage; };\r\n\t\t\t\tvm.enableTranslate = function () { return vm.fieldModel.getVsWithLanguage(languages.currentLanguage) === null; };\r\n\r\n\t\t\t\tvm.infoMessage = function () {\r\n\t\t\t\t    if (Object.keys($scope.value.Dimensions).length === 1 && $scope.value.Dimensions[languages.defaultLanguage] === false)\r\n\t\t\t\t        return lblDefault;\r\n\t\t\t\t    if (Object.keys($scope.value.Dimensions).length === 1 && $scope.value.Dimensions[languages.currentLanguage] === false)\r\n\t\t\t\t        return \"\";\r\n\t\t\t\t    return $translate.instant(\"LangMenu.In\", { languages: Object.keys($scope.value.Dimensions).join(\", \") });\r\n\t\t\t\t    // \"in \" + Object.keys($scope.value.Dimensions).join(\", \");\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvm.tooltip = function () {\r\n\t\t\t\t    var editableIn = [];\r\n\t\t\t\t    var usedIn = [];\r\n\t\t\t\t    angular.forEach($scope.value.Dimensions, function (value, key) {\r\n\t\t\t\t        (value ? usedIn : editableIn).push(key);\r\n\t\t\t\t    });\r\n\t\t\t\t    var tooltip = $translate.instant(\"LangMenu.EditableIn\", { languages: editableIn.join(\", \") }); // \"editable in \" + editableIn.join(\", \");\r\n\t\t\t\t    if (usedIn.length > 0)\r\n\t\t\t\t        tooltip += $translate.instant(\"LangMenu.AlsoUsedIn\", { languages: usedIn.join(\", \") });// \", also used in \" + usedIn.join(\", \");\r\n\t\t\t\t    return tooltip;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvm.actions = {\r\n\t\t\t\t    toggleTranslate: function toggleTranslate() {\r\n\t\t\t\t        if (vm.enableTranslate())\r\n\t\t\t\t            vm.actions.translate();\r\n\t\t\t\t        else\r\n\t\t\t\t            vm.actions.linkDefault();\r\n\t\t\t\t    },\r\n\t\t\t\t    translate: function translate() {\r\n\t\t\t\t        if (vm.enableTranslate()) {\r\n\t\t\t\t            vm.fieldModel.removeLanguage(languages.currentLanguage);\r\n\t\t\t\t            vm.fieldModel.addVs($scope.value.Value, languages.currentLanguage, false);\r\n\t\t\t\t        }\r\n\t\t\t\t    },\r\n\t\t\t\t    linkDefault: function linkDefault() {\r\n\t\t\t\t        vm.fieldModel.removeLanguage(languages.currentLanguage);\r\n\t\t\t\t    },\r\n\t\t\t\t    autoTranslate: function (languageKey) {\r\n\t\t\t\t        // Google translate is not implemented yet, because\r\n                        // there is no longer a free api.\r\n\t\t\t\t        alert($translate.instant(\"LangMenu.NotImplemented\"));\r\n\t\t\t\t    },\r\n\t\t\t\t    copyFrom: function (languageKey) {\r\n\t\t\t\t        if ($scope.options.templateOptions.disabled)\r\n\t\t\t\t            alert($translate.instant(\"LangMenu.CopyNotPossible\"));\r\n\t\t\t\t        else {\r\n\t\t\t\t            var value = vm.fieldModel.getVsWithLanguage(languageKey).Value;\r\n\t\t\t\t            if (vs === null || vs === undefined)\r\n\t\t\t\t                console.log($scope.options.key + \": Can't copy value from \" + languageKey + ' because that value does not exist.');\r\n\t\t\t\t            else\r\n\t\t\t\t                $scope.value.Value = value;\r\n\t\t\t\t        }\r\n\t\t\t\t    },\r\n\t\t\t\t    useFrom: function (languageKey) {\r\n\t\t\t\t        var vs = vm.fieldModel.getVsWithLanguage(languageKey);\r\n\t\t\t\t        if (vs === null || vs === undefined)\r\n\t\t\t\t            console.log($scope.options.key + \": Can't use value from \" + languageKey + ' because that value does not exist.');\r\n\t\t\t\t        else {\r\n\t\t\t\t            vm.fieldModel.removeLanguage(languages.currentLanguage);\r\n\t\t\t\t            vs.setLanguage(languages.currentLanguage, true);\r\n\t\t\t\t        }\r\n\t\t\t\t    },\r\n\t\t\t\t    shareFrom: function (languageKey) {\r\n\t\t\t\t        var vs = vm.fieldModel.getVsWithLanguage(languageKey);\r\n\t\t\t\t        if (vs === null || vs === undefined)\r\n\t\t\t\t            console.log($scope.options.key + \": Can't share value from \" + languageKey + ' because that value does not exist.');\r\n\t\t\t\t        else {\r\n\t\t\t\t            vm.fieldModel.removeLanguage(languages.currentLanguage);\r\n\t\t\t\t            vs.setLanguage(languages.currentLanguage, false);\r\n\t\t\t\t        }\r\n\t\t\t\t    },\r\n\t\t\t\t    all: {\r\n\t\t\t\t        translate: function translate() {\r\n\t\t\t\t            forAllMenus('translate');\r\n\t\t\t\t        },\r\n\t\t\t\t        linkDefault: function linkDefault() {\r\n\t\t\t\t            forAllMenus('linkDefault');\r\n\t\t\t\t        },\r\n\t\t\t\t        copyFrom: function (languageKey) {\r\n\t\t\t\t            forAllMenus('copyFrom', languageKey);\r\n\t\t\t\t        },\r\n\t\t\t\t        useFrom: function (languageKey) {\r\n\t\t\t\t            forAllMenus('useFrom', languageKey);\r\n\t\t\t\t        },\r\n\t\t\t\t        shareFrom: function (languageKey) {\r\n\t\t\t\t            forAllMenus('shareFrom', languageKey);\r\n\t\t\t\t        }\r\n\t\t\t\t    }\r\n\t\t\t\t};\r\n\r\n\t\t\t    // Collect all localizationMenus (to enable \"all\" actions)\r\n\t\t\t\tif ($scope.formModel.localizationMenus === undefined)\r\n\t\t\t\t    $scope.formModel.localizationMenus = [];\r\n\t\t\t\t$scope.formModel.localizationMenus.push(vm.actions);\r\n\r\n\t\t\t\tvar forAllMenus = function (action, languageKey) {\r\n\t\t\t\t    for (var i = 0; i < $scope.formModel.localizationMenus.length; i++) {\r\n\t\t\t\t        $scope.formModel.localizationMenus[i][action](languageKey);\r\n\t\t\t\t    }\r\n\t\t\t\t};\r\n\t\t\t}]\r\n\t\t};\r\n\t});\r\n\r\n\teavLocalization.directive(\"eavTreatTimeUtc\", function () {\r\n\t    var directive = {\r\n\t        restrict: \"A\",\r\n\t        require: [\"ngModel\"],\r\n            compile: compile,\r\n\t        link: link\r\n\t    };\r\n\t    return directive;\r\n\r\n\t    function compile(element, attributes) {\r\n\r\n\t    }\r\n\r\n\t    function link(scope, element, attributes, modelController) {     \r\n\t        modelController[0].$formatters.push(function (modelValue) {\r\n\r\n\t            return modelValue;\r\n\t        });\r\n\r\n\t        modelController[0].parsers.push(function (viewValue) {\r\n\r\n\t            return viewValue;\r\n\t        });\r\n\t    }\r\n\t});\r\n})();\n\r\n\r\n// Note: the entity-reader is meant for admin-purposes. \r\n// It does not try to do fallback, because the admin-UI MUST know the real data\r\nfunction enhanceEntity(entity) {\r\n    var enhancer = this; \r\n\r\n    enhancer.enhanceWithCount = function (obj) {\r\n        obj.count = function () {\r\n            var key, count = 0;\r\n            for (key in this)\r\n                if (this.hasOwnProperty(key) && typeof this[key] != 'function')\r\n                    count++;\r\n            return count;\r\n        };\r\n    }; \r\n\r\n    // this will enhance a Values with necessary methods\r\n    enhancer.enhanceVs = function (vs) {\r\n        vs.hasLanguage = function (language) { return this.Dimensions.hasOwnProperty(language); };\r\n        vs.setLanguage = function (language, shareMode) { this.Dimensions[language] = shareMode; };\r\n        vs.languageMode = function(language) { return (this.hasLanguage(language)) ? this.Dimensions[language] : null; };\r\n\r\n        // ToDo: Fix enhance dimensions - or use alternative Object.keys(vs.Dimensions).length\r\n        //if(typeof vs.Dimensions != \"undefined\")\r\n            //enhancer.enhanceWithCount(vs.Dimensions);\r\n        return vs;\r\n    };\r\n\r\n    // this will enhance an attribute\r\n    enhancer.enhanceAtt = function(att) {\r\n        att.getVsWithLanguage = function(language) {\r\n            // try to find it based on the language - it then has a property matching the language\r\n            for (var v = 0; v < this.Values.length; v++)\r\n                if (this.Values[v].hasLanguage(language))\r\n                    return this.Values[v];\r\n\r\n            // if we don't find it, we must report it back as such\r\n            return null;\r\n        };\r\n\r\n        att.setLanguageToVs = function(vs, language, shareMode) {\r\n            // check if it's already there, if yes, just ensure shareMode, then done\r\n            if (vs.hasLanguage(language))\r\n                return vs.setLanguage(language, shareMode);\r\n\r\n            // otherwise find the language if it's anywhere else and remove that first; \r\n            // note that this might delete a value set, so we should only do it after checking if it wasn't already right\r\n            this.removeLanguage(language);\r\n\r\n            // now set it anew\r\n            return vs.setLanguage(language, shareMode);\r\n        };\r\n\r\n        att.removeLanguage = function(language) {\r\n            var value = this.getVsWithLanguage(language);\r\n            if (value === null)\r\n                return;\r\n            delete value.Dimensions[language];\r\n\r\n            // check if the vs still has any properties left, if not, remove it entirely - unless it's the last one...\r\n            if (Object.keys(value.Dimensions).length === 0 && this.Values.length > 0)\r\n                this.removeVs(value);\r\n        };\r\n\r\n        att.removeVs = function(vs) {\r\n            for (var v = 0; v < this.Values.length; v++)\r\n                if (this.Values[v] === vs)\r\n                    this.Values.splice(v, 1);\r\n        };\r\n\r\n        // todo: when adding VS - ensure the events are added too...\r\n        att.addVs = function(value, language, shareMode) {\r\n            var dimensions = {};\r\n            if(language !== null)\r\n                dimensions[language] = ((shareMode === null || shareMode === undefined) ? false : shareMode);\r\n            var newVs = { \"Value\": value, \"Dimensions\": dimensions };\r\n            // ToDo: enhancer.enhanceWithCount(newVs.Dimensions);\r\n            this.Values.push(enhancer.enhanceVs(newVs));\r\n        };\r\n\r\n        // Now go through the Values and give them more commands\r\n        for (var v = 0; v < att.Values.length; v++)\r\n            enhancer.enhanceVs(att.Values[v]);\r\n\r\n        return att;\r\n    };\r\n\r\n    // this will enhance an entity\r\n    enhancer.enhanceEntity = function(ent) {\r\n        ent.getTitle = function() {\r\n            ent.getAttribute(ent.TitleAttributeName);\r\n        };\r\n\r\n        ent.hasAttribute = function(attrName) {\r\n            return ent.Attributes[attrName] !== undefined;\r\n        };\r\n\r\n        ent.getAttribute = function(attrName) {\r\n            return ent.Attributes[attrName];\r\n        };\r\n\r\n        // ToDo: Discuss with 2dm \r\n        ent.Attributes.addAttribute = function (attrName) {\r\n            ent.Attributes[attrName] = { Values: [] };\r\n            enhancer.enhanceAtt(ent.Attributes[attrName]);\r\n        };\r\n\r\n        for (var attKey in ent.Attributes)\r\n            if(ent.Attributes.hasOwnProperty(attKey) && typeof(ent.Attributes[attKey]) != 'function')\r\n                enhancer.enhanceAtt(ent.Attributes[attKey]);\r\n\r\n        return ent;\r\n    };\r\n\r\n    return enhancer.enhanceEntity(entity);\r\n}\n/* service to manage input types */\r\n(function () {\r\n\t\"use strict\";\r\n\r\n    // notes: this has not been tested extensively\r\n    // I'm guessing that it's not optimal yet, and I'm guessing that if the dialog is opened multiple times, that the list of dependencies just\r\n    // keeps on growing and the UI might just get heavier with time ... must test once we have a few custom input types\r\n\r\n\tangular.module(\"eavEditEntity\")\r\n        .service(\"customInputTypes\", [\"eavConfig\", \"toastr\", \"formlyConfig\", \"$q\", \"$interval\", \"$ocLazyLoad\", function (eavConfig, toastr, formlyConfig, $q, $interval, $ocLazyLoad) {\r\n            // Returns a typed default value from the string representation\r\n            var svc = {};\r\n            svc.inputTypesOnPage = {};\r\n            svc.allLoaded = true;\r\n            svc.assetsToLoad = [];\r\n\r\n\t        svc.addInputType = function addInputType(field) {\r\n\t            var config = field.InputTypeConfig;\r\n                // check if anything defined - older configurations don't have anything and will default to string-default anyhow\r\n\t            if (config === undefined || config === null)\r\n\t                return;\r\n\r\n\t            svc.inputTypesOnPage[config.Type] = config;\r\n\r\n\t            svc.addToLoadQueue(config);\r\n\t        };\r\n\r\n\t        svc.addToLoadQueue = function loadNewAssets(config) {\r\n\t            if (config.Assets === undefined || config.Assets === null || !config.Assets) {\r\n\t                config.assetsLoaded = true;\r\n\t                return;\r\n\t            }\r\n\r\n\t            // split by new-line, ensuring nothing blank\r\n\t            var list = config.Assets.split(\"\\n\");\r\n\r\n\t            for (var a = 0; a < list.length; a++) {\r\n\t                var asset = list[a].trim();\r\n\t                if (asset.length > 5) { // ensure we skip empty lines etc.\r\n\t                    svc.assetsToLoad.push(svc.resolveSpecialPaths(asset));\r\n\t                }\r\n\t            }\r\n\t        };\r\n\r\n\t        // now create promise and wait for everything to load\r\n\t        svc.loadWithPromise = function loadWithPromise() {\r\n\t            return $ocLazyLoad.load(svc.assetsToLoad);\r\n\r\n\t        };\r\n\r\n\t        svc.resolveSpecialPaths = function resolve(url) {\r\n\t            url = url.replace(/\\[System:Path\\]/i, eavConfig.getUrlPrefix(\"system\"))\r\n\t                .replace(/\\[Zone:Path\\]/i, eavConfig.getUrlPrefix(\"zone\"))\r\n\t                .replace(/\\[App:Path\\]/i, eavConfig.getUrlPrefix(\"app\"));\r\n\t            return url;\r\n\t        };\r\n\r\n\t        svc.checkDependencyArrival = function cda(typeName) {\r\n\t            return !!formlyConfig.getType(typeName);\r\n\t        };\r\n\r\n\t        return svc;\r\n\t    }]);\r\n\r\n})();\n/* global angular */\r\n(function () {\r\n\t\"use strict\";\r\n\r\n\tangular.module(\"eavEditEntity\")\r\n        .service(\"eavDefaultValueService\", function () {\r\n\t\t// Returns a typed default value from the string representation\r\n\t\treturn function parseDefaultValue(fieldConfig) {\r\n\t\t\tvar e = fieldConfig;\r\n\t\t\tvar d = e.templateOptions.settings.All.DefaultValue;\r\n\r\n\t\t    if (e.templateOptions.header.Prefill && e.templateOptions.header.Prefill[e.key]) {\r\n\t\t\t    d = e.templateOptions.header.Prefill[e.key];\r\n\t\t\t}\r\n\r\n\t\t\tswitch (e.type.split(\"-\")[0]) {\r\n\t\t\t\tcase \"boolean\":\r\n\t\t\t\t\treturn d !== undefined && d !== null ? d.toLowerCase() === \"true\" : false;\r\n\t\t\t\tcase \"datetime\":\r\n\t\t\t\t\treturn d !== undefined && d !== null && d !== \"\" ? new Date(d) : null;\r\n\t\t\t\tcase \"entity\":\r\n\t\t\t\t    return d !== undefined && d !== null && d !== \"\" ? d : []; \r\n\t\t\t\tcase \"number\":\r\n\t\t\t\t    return d !== undefined && d !== null && d !== \"\" ? Number(d) : \"\";\r\n                default:\r\n\t\t\t\t\treturn d ? d : \"\";\r\n\t\t\t}\r\n\t\t};\r\n\t});\r\n\r\n})();\n/* global angular */\r\n(function () {\r\n\t\"use strict\";\r\n\r\n    angular.module(\"eavEditEntity\")\r\n        /// Standard entity commands like get one, many etc.\r\n        .factory(\"entitiesSvc\", [\"$http\", \"appId\", \"toastrWithHttpErrorHandling\", \"promiseToastr\", function ($http, appId, toastrWithHttpErrorHandling, promiseToastr) {\r\n            var svc = {\r\n                toastr: toastrWithHttpErrorHandling\r\n            };\r\n\r\n            svc.getManyForEditing = function(appId, items) {\r\n                return $http.post(\"eav/entities/getmanyforediting\", items, { params: { appId: appId } });\r\n            };\r\n\r\n            svc.saveMany = function(appId, items) {\r\n                // first clean up unnecessary nodes - just to make sure we don't miss-read the JSONs transferred\r\n                var removeTempValue = function(value, key) { delete value._currentValue; };\r\n                var itmCopy = angular.copy(items);\r\n                for (var ei = 0; ei < itmCopy.length; ei++)\r\n                    angular.forEach(itmCopy[ei].Entity.Attributes, removeTempValue);\r\n\r\n                return $http.post(\"eav/entities/savemany\", itmCopy, { params: { appId: appId } }).then(function (serverKeys) {\r\n                    var syncUpdatedKeys = function(value, key) {\r\n                        // first ensure we don't break something\r\n                        var ent = value.Entity;\r\n                        if ((ent.Id === null || ent.Id === 0) && (ent.Guid !== null || typeof (ent.Guid) !== \"undefined\" || ent.Guid !== \"00000000-0000-0000-0000-000000000000\")) {\r\n                            // try to find it in the return material to re-assign it\r\n                            var newId = serverKeys.data[ent.Guid];\r\n                            value.Entity.Id = newId;\r\n                            value.Header.ID = newId;\r\n                        }\r\n                    };\r\n                    angular.forEach(items, syncUpdatedKeys);\r\n\r\n                    return serverKeys;\r\n                });\r\n            };\r\n\r\n            svc.delete = function del(type, id) {\r\n                console.log(\"try to delete\");\r\n\r\n                var delPromise = $http.get(\"eav/entities/delete\", {\r\n                    ignoreErrors: true,\r\n                    params: {\r\n                        'contentType': type,\r\n                        'id': id,\r\n                        'appId': appId\r\n                    }\r\n                });\r\n                return promiseToastr(delPromise, \"Message.Deleting\", \"Message.Ok\", \"Message.Error\");\r\n            };\r\n\r\n            svc.newEntity = function(header) {\r\n                return {\r\n                    Id: null,\r\n                    Guid: header.Guid, \r\n                    Type: {\r\n                        StaticName: header.ContentTypeName // contentTypeName\r\n                    },\r\n                    Attributes: {},\r\n                    IsPublished: true\r\n                };\r\n            };\r\n\r\n\r\n            svc.save = function save(appId, newData) {\r\n                return $http.post(\"eav/entities/save\", newData, { params: { appId: appId } });\r\n            };\r\n\r\n            return svc;\r\n        }]);\r\n\r\n\r\n})();\nangular.module(\"eavEditTemplates\", []).run([\"$templateCache\", function($templateCache) {$templateCache.put(\"localization/formly-localization-wrapper.html\",\"<eav-localization-scope-control></eav-localization-scope-control>\\r\\n<div ng-if=\\\"!!value\\\">\\r\\n    <formly-transclude></formly-transclude>\\r\\n    <eav-localization-menu form-model=\\\"model\\\" field-model=\\\"model[options.key]\\\" options=\\\"options\\\" value=\\\"value\\\" index=\\\"index\\\"></eav-localization-menu>\\r\\n</div>\\r\\n<p class=\\\"bg-info\\\" style=\\\"padding:12px;\\\" ng-if=\\\"!value\\\" translate=\\\"LangWrapper.CreateValueInDefFirst\\\" translate-values=\\\"{ fieldname: \\'{{to.label}}\\' }\\\">Please... <i>\\'{{to.label}}\\'</i> in the def...</p>\");\n$templateCache.put(\"localization/language-switcher.html\",\"<tabset>\\r\\n    <tab ng-repeat=\\\"l in languages.languages\\\" heading=\\\"{{ l.name.substring(0, l.name.indexOf(\\'(\\') > 0 ? l.name.indexOf(\\'(\\') - 1 : 100 ) }}\\\" ng-click=\\\"!isDisabled ? languages.currentLanguage = l.key : false;\\\" disable=\\\"isDisabled\\\" active=\\\"languages.currentLanguage == l.key\\\" tooltip=\\\"{{l.name}}\\\"></tab>\\r\\n</tabset>\");\n$templateCache.put(\"localization/localization-menu.html\",\"<div dropdown is-open=\\\"status.isopen\\\" class=\\\"eav-localization\\\"> <!--style=\\\"z-index:{{1000 - index}};\\\"-->\\r\\n\t<a class=\\\"eav-localization-lock\\\" ng-click=\\\"vm.actions.toggleTranslate();\\\" ng-if=\\\"vm.isDefaultLanguage()\\\" title=\\\"{{vm.tooltip()}}\\\" ng-class=\\\"{ \\'eav-localization-lock-open\\': !options.templateOptions.disabled }\\\" dropdown-toggle>\\r\\n        {{vm.infoMessage()}} <i class=\\\"glyphicon glyphicon-globe\\\"></i>\\r\\n\t</a>\\r\\n    <ul class=\\\"dropdown-menu multi-level pull-right eav-localization-dropdown\\\" role=\\\"menu\\\" aria-labelledby=\\\"single-button\\\">\\r\\n        <li role=\\\"menuitem\\\"><a ng-click=\\\"vm.actions.translate()\\\" translate=\\\"LangMenu.Unlink\\\"></a></li>\\r\\n        <li role=\\\"menuitem\\\"><a ng-click=\\\"vm.actions.linkDefault()\\\" translate=\\\"LangMenu.LinkDefault\\\"></a></li>\\r\\n        <!-- Google translate is disabled because there is no longer a free version\\r\\n            <li role=\\\"menuitem\\\" class=\\\"dropdown-submenu\\\">\\r\\n            <a href=\\\"#\\\" translate=\\\"LangMenu.GoogleTranslate\\\"></a>\\r\\n            <ul class=\\\"dropdown-menu\\\">\\r\\n                <li ng-repeat=\\\"language in vm.languages.languages\\\" role=\\\"menuitem\\\">\\r\\n                    <a ng-click=\\\"vm.actions.autoTranslate(language.key)\\\" title=\\\"{{language.name}}\\\" href=\\\"#\\\">{{language.key}}</a>\\r\\n                </li>\\r\\n            </ul>\\r\\n        </li>-->\\r\\n        <li role=\\\"menuitem\\\" class=\\\"dropdown-submenu\\\">\\r\\n            <a href=\\\"#\\\" translate=\\\"LangMenu.Copy\\\"></a>\\r\\n            <ul class=\\\"dropdown-menu\\\">\\r\\n                <li ng-repeat=\\\"language in vm.languages.languages\\\" ng-class=\\\"{ disabled: options.templateOptions.disabled || !vm.hasLanguage(language.key) }\\\" role=\\\"menuitem\\\">\\r\\n                    <a ng-click=\\\"vm.actions.copyFrom(language.key)\\\" title=\\\"{{language.name}}\\\" href=\\\"#\\\">{{language.key}}</a>\\r\\n                </li>\\r\\n            </ul>\\r\\n        </li>\\r\\n        <li role=\\\"menuitem\\\" class=\\\"dropdown-submenu\\\">\\r\\n            <a href=\\\"#\\\" translate=\\\"LangMenu.Use\\\"></a>\\r\\n            <ul class=\\\"dropdown-menu\\\">\\r\\n                <li ng-repeat=\\\"language in vm.languages.languages\\\" ng-class=\\\"{ disabled: !vm.hasLanguage(language.key) }\\\" role=\\\"menuitem\\\">\\r\\n                    <a ng-click=\\\"vm.actions.useFrom(language.key)\\\" title=\\\"{{language.name}}\\\" href=\\\"#\\\">{{language.key}}</a>\\r\\n                </li>\\r\\n            </ul>\\r\\n        </li>\\r\\n        <li role=\\\"menuitem\\\" class=\\\"dropdown-submenu\\\">\\r\\n            <a href=\\\"#\\\" translate=\\\"LangMenu.Share\\\"></a>\\r\\n            <ul class=\\\"dropdown-menu\\\">\\r\\n                <li ng-repeat=\\\"language in vm.languages.languages\\\" ng-class=\\\"{ disabled: !vm.hasLanguage(language.key) }\\\" role=\\\"menuitem\\\">\\r\\n                    <a ng-click=\\\"vm.actions.shareFrom(language.key)\\\" title=\\\"{{language.name}}\\\" href=\\\"#\\\">{{language.key}}</a>\\r\\n                </li>\\r\\n            </ul>\\r\\n        </li>\\r\\n        <!-- All fields -->\\r\\n        <li class=\\\"divider\\\"></li>\\r\\n        <li role=\\\"menuitem\\\" class=\\\"dropdown-submenu\\\">\\r\\n            <a href=\\\"#\\\" translate=\\\"LangMenu.AllFields\\\"></a>\\r\\n            <ul class=\\\"dropdown-menu\\\">\\r\\n                <li role=\\\"menuitem\\\"><a ng-click=\\\"vm.actions.all.translate()\\\" translate=\\\"LangMenu.Unlink\\\"></a></li>\\r\\n                <li role=\\\"menuitem\\\"><a ng-click=\\\"vm.actions.all.linkDefault()\\\" translate=\\\"LangMenu.LinkDefault\\\"></a></li>\\r\\n                <li role=\\\"menuitem\\\" class=\\\"dropdown-submenu\\\">\\r\\n                    <a href=\\\"#\\\" translate=\\\"LangMenu.Copy\\\"></a>\\r\\n                    <ul class=\\\"dropdown-menu\\\">\\r\\n                        <li ng-repeat=\\\"language in vm.languages.languages\\\" role=\\\"menuitem\\\">\\r\\n                            <a ng-click=\\\"vm.actions.all.copyFrom(language.key)\\\" title=\\\"{{language.name}}\\\" href=\\\"#\\\">{{language.key}}</a>\\r\\n                        </li>\\r\\n                    </ul>\\r\\n                </li>\\r\\n                <li role=\\\"menuitem\\\" class=\\\"dropdown-submenu\\\">\\r\\n                    <a href=\\\"#\\\" translate=\\\"LangMenu.Use\\\"></a>\\r\\n                    <ul class=\\\"dropdown-menu\\\">\\r\\n                        <li ng-repeat=\\\"language in vm.languages.languages\\\" role=\\\"menuitem\\\">\\r\\n                            <a ng-click=\\\"vm.actions.all.useFrom(language.key)\\\" title=\\\"{{language.name}}\\\" href=\\\"#\\\">{{language.key}}</a>\\r\\n                        </li>\\r\\n                    </ul>\\r\\n                </li>\\r\\n                <li role=\\\"menuitem\\\" class=\\\"dropdown-submenu\\\">\\r\\n                    <a href=\\\"#\\\" translate=\\\"LangMenu.Share\\\"></a>\\r\\n                    <ul class=\\\"dropdown-menu\\\">\\r\\n                        <li ng-repeat=\\\"language in vm.languages.languages\\\" role=\\\"menuitem\\\">\\r\\n                            <a ng-click=\\\"vm.actions.all.shareFrom(language.key)\\\" title=\\\"{{language.name}}\\\" href=\\\"#\\\">{{language.key}}</a>\\r\\n                        </li>\\r\\n                    </ul>\\r\\n                </li>\\r\\n            </ul>\\r\\n        </li>\\r\\n    </ul>\\r\\n</div>\");\n$templateCache.put(\"form/edit-many-entities.html\",\"<div ng-if=\\\"vm.items != null\\\" ng-click=\\\"vm.debug.autoEnableAsNeeded($event)\\\">\\r\\n    <eav-language-switcher is-disabled=\\\"!vm.isValid()\\\"></eav-language-switcher>\\r\\n\\r\\n    <div ng-repeat=\\\"p in vm.items\\\" class=\\\"group-entity\\\">\\r\\n        <h3 class=\\\"clickable\\\" ng-click=\\\"p.collapse = !p.collapse\\\">\\r\\n            {{p.Header.Title ? p.Header.Title : \\'EditEntity.DefaultTitle\\' | translate }}&nbsp;\\r\\n            <span ng-if=\\\"p.Header.Group.SlotCanBeEmpty\\\" ng-click=\\\"vm.toggleSlotIsEmpty(p)\\\" stop-event=\\\"click\\\">\\r\\n                <switch ng-model=\\\"p.slotIsUsed\\\" class=\\\"tosic-blue\\\" style=\\\"top: 6px;\\\" tooltip=\\\"{{\\'EditEntity.SlotUsed\\' + p.slotIsUsed | translate}}\\\"></switch>\\r\\n            </span>\\r\\n            <span class=\\\"pull-right clickable\\\" style=\\\"font-size: smaller\\\">\\r\\n                <span class=\\\"low-priority collapse-entity-button\\\" ng-if=\\\"p.collapse\\\" icon=\\\"plus-sign\\\"></span>\\r\\n                <span class=\\\"collapse-entity-button\\\" ng-if=\\\"!p.collapse\\\" icon=\\\"minus-sign\\\"></span>\\r\\n            </span>\\r\\n        </h3>\\r\\n        <eav-edit-entity-form entity=\\\"p.Entity\\\" header=\\\"p.Header\\\" register-edit-control=\\\"vm.registerEditControl\\\" ng-hide=\\\"p.collapse\\\"></eav-edit-entity-form>\\r\\n    </div>\\r\\n\\r\\n\\r\\n    <div>\\r\\n        <!-- note: the buttons are not really disabled, because we want to be able to click them and see the error message -->\\r\\n        <button ng-class=\\\"{ \\'disabled\\': !vm.isValid() || vm.isWorking > 0}\\\" ng-click=\\\"vm.save(true)\\\" type=\\\"button\\\" class=\\\"btn btn-primary btn-lg submit-button\\\">\\r\\n            <span icon=\\\"ok\\\" tooltip=\\\"{{ \\'Button.Save\\' | translate }}\\\"></span> &nbsp;<span translate=\\\"Button.Save\\\"></span>\\r\\n        </button>\\r\\n        &nbsp;\\r\\n        <button ng-class=\\\"{ \\'disabled\\': !vm.isValid() || vm.isWorking > 0}\\\" class=\\\"btn btn-default btn-lg btn-square\\\" type=\\\"button\\\" ng-click=\\\"vm.save(false)\\\">\\r\\n            <span icon=\\\"check\\\" tooltip=\\\"{{ \\'Button.SaveAndKeepOpen\\' | translate }}\\\"></span>\\r\\n        </button>\\r\\n        &nbsp;\\r\\n        <!-- note: published status will apply to all - so the first is taken for identification if published -->\\r\\n        <switch ng-model=\\\"vm.willPublish\\\" class=\\\"tosic-blue\\\" style=\\\"top: 13px;\\\"></switch>\\r\\n        &nbsp;\\r\\n        <span ng-click=\\\"vm.willPublish = !vm.willPublish;\\\" class=\\\"save-published-icon\\\">\\r\\n            <i ng-if=\\\"vm.willPublish\\\" icon=\\\"eye-open\\\" tooltip=\\\"{{ \\'Status.Published\\' | translate }} - {{ \\'Message.WillPublish\\' | translate }}\\\"></i>\\r\\n            <i ng-if=\\\"!vm.willPublish\\\" icon=\\\"eye-close\\\" tooltip=\\\"{{ \\'Status.Unpublished\\' | translate }} - {{ \\'Message.WontPublish\\' | translate }}\\\"></i>\\r\\n        </span>\\r\\n\\r\\n\\r\\n        <span ng-if=\\\"vm.debug.on\\\">\\r\\n            <button tooltip=\\\"debug\\\" icon=\\\"zoom-in\\\" class=\\\"btn\\\" ng-click=\\\"vm.showDebugItems = !vm.showDebugItems\\\"></button>\\r\\n        </span>\\r\\n        <show-debug-availability class=\\\"pull-right\\\" style=\\\"margin-top: 20px;\\\"></show-debug-availability>\\r\\n    </div>\\r\\n    <div ng-if=\\\"vm.debug.on && vm.showDebugItems\\\">\\r\\n        <div>\\r\\n            isValid: {{vm.isValid()}}<br/>\\r\\n            isWorking: {{vm.isWorking}}\\r\\n        </div>\\r\\n        <pre>{{ vm.items | json }}</pre>\\r\\n    </div>\\r\\n</div>\");\n$templateCache.put(\"form/edit-single-entity.html\",\"<div ng-show=\\\"vm.editInDefaultLanguageFirst()\\\" translate=\\\"Message.PleaseCreateDefLang\\\">\\r\\n\t\\r\\n</div>\\r\\n<div ng-show=\\\"!vm.editInDefaultLanguageFirst()\\\">\\r\\n    <formly-form ng-if=\\\"vm.formFields && vm.formFields.length\\\" ng-submit=\\\"vm.onSubmit()\\\" form=\\\"vm.form\\\" model=\\\"vm.entity.Attributes\\\" fields=\\\"vm.formFields\\\"></formly-form>\\r\\n</div>\");\n$templateCache.put(\"form/main-form.html\",\"<div class=\\\"modal-body\\\">\\r\\n    <span class=\\\"pull-right\\\">\\r\\n        <span style=\\\"display: inline-block; position: relative; left:15px\\\">\\r\\n            <button class=\\\"btn btn-default btn-square btn-subtle\\\" type=\\\"button\\\" ng-click=\\\"vm.close()\\\"><i icon=\\\"remove\\\"></i></button>\\r\\n        </span>\\r\\n    </span>\\r\\n    <eav-edit-entities item-list=\\\"vm.itemList\\\" after-save-event=\\\"vm.afterSave\\\" state=\\\"vm.state\\\"></eav-edit-entities>\\r\\n</div>\");\n$templateCache.put(\"wrappers/collapsible.html\",\"<div ng-show=\\\"!to.collapse\\\" class=\\\"group-field-set\\\">\\r\\n    <formly-transclude></formly-transclude>\\r\\n</div>\");\n$templateCache.put(\"wrappers/disablevisually.html\",\"<div visually-disabled=\\\"{{to.disabled}}\\\">\\r\\n    <formly-transclude></formly-transclude>\\r\\n</div>\");\n$templateCache.put(\"wrappers/eav-label.html\",\"<div>\\r\\n    <label for=\\\"{{id}}\\\" class=\\\"control-label eav-label {{to.labelSrOnly ? \\'sr-only\\' : \\'\\'}} {{to.type}}\\\" ng-if=\\\"to.label\\\">\\r\\n        {{to.label}}\\r\\n        {{to.required ? \\'*\\' : \\'\\'}}\\r\\n        <a tabindex=\\\"-1\\\" ng-click=\\\"to.showDescription = !to.showDescription\\\" href=\\\"javascript:void(0);\\\" ng-if=\\\"to.description && to.description != \\'\\'\\\">\\r\\n            <i icon=\\\"info-sign\\\" class=\\\"low-priority\\\"></i>\\r\\n        </a>\\r\\n    </label>\\r\\n    <p ng-if=\\\"to.showDescription\\\" class=\\\"bg-info\\\" style=\\\"padding: 5px;\\\" ng-bind-html=\\\"to.description\\\">\\r\\n    </p>\\r\\n    <formly-transclude></formly-transclude>\\r\\n</div>\");\n$templateCache.put(\"wrappers/field-group.html\",\"<div>\\r\\n    <h4 class=\\\"clickable\\\" ng-click=\\\"to.collapseGroup = !to.collapseGroup\\\">\\r\\n        {{to.label}}\\r\\n        <span class=\\\"pull-right btn-sm\\\">\\r\\n            <span ng-if=\\\"to.collapseGroup\\\" class=\\\"low-priority collapse-fieldgroup-button\\\" icon=\\\"plus-sign\\\"></span>\\r\\n            <span ng-if=\\\"!to.collapseGroup\\\" class=\\\"low-priority collapse-fieldgroup-button\\\" icon=\\\"minus-sign\\\"></span>\\r\\n        </span>\\r\\n    </h4>\\r\\n    <div ng-if=\\\"!to.collapseGroup\\\" style=\\\"padding: 5px;\\\" ng-bind-html=\\\"to.description\\\">\\r\\n    </div>\\r\\n    <formly-transclude></formly-transclude>\\r\\n</div>\");\n$templateCache.put(\"fields/empty/empty-default.html\",\"<span></span>\");\n$templateCache.put(\"fields/boolean/boolean-default.html\",\"<div class=\\\"checkbox checkbox-labeled\\\">\\r\\n    <!--<label>-->\\r\\n        <switch class=\\\"tosic-green pull-left\\\" ng-model=\\\"value.Value\\\"></switch>\\r\\n    <!-- maybe need the (hidden) input to ensure the label actually switches the boolean -->\\r\\n        <!--<input type=\\\"checkbox\\\" class=\\\"formly-field-checkbox\\\" ng-model=\\\"value.Value\\\" style=\\\"display: none\\\">-->\\r\\n        <div ng-include=\\\"\\'wrappers/eav-label.html\\'\\\"></div>\\r\\n        <!--{{to.label}} {{to.required ? \\'*\\' : \\'\\'}}-->\\r\\n    <!--</label>-->\\r\\n</div>\");\n$templateCache.put(\"fields/entity/entity-default.html\",\"<div class=\\\"eav-entityselect\\\">\\r\\n\\r\\n    <div ui-tree=\\\"options\\\" data-empty-placeholder-enabled=\\\"false\\\" ng-show=\\\"to.settings.merged.EnableCreate || chosenEntities.length > 0\\\">\\r\\n        <table ui-tree-nodes ng-model=\\\"chosenEntities\\\" entity-validation ng-required=\\\"false\\\" class=\\\"table eav-entityselect-table\\\" style=\\\"table-layout:fixed;\\\">\\r\\n            <thead>\\r\\n                <tr>\\r\\n                    <th></th>\\r\\n                    <th></th>\\r\\n                    <th></th>\\r\\n                </tr>\\r\\n            </thead>\\r\\n            <tr ng-repeat=\\\"item in chosenEntities track by $id(item)\\\" ui-tree-node class=\\\"eav-entityselect-item\\\" ui-tree-handle>\\r\\n                <td>\\r\\n                    <i title=\\\"{{ \\'FieldType.Entity.DragMove\\' | translate }}\\\" class=\\\"icon-link pull-left eav-entityselect-icon\\\" ng-show=\\\"to.settings.Entity.AllowMultiValue\\\"></i>\\r\\n                </td>\\r\\n                <td>\\r\\n                    <span class=\\\"eav-entityselect-item-title\\\" title=\\\"{{getEntityText(item) + \\' (\\' + item + \\')\\'}}\\\">{{getEntityText(item)}}</span>\\r\\n                </td>\\r\\n                <td style=\\\"text-align:right;\\\">\\r\\n                    <ul class=\\\"eav-entityselect-item-actions\\\" data-nodrag>\\r\\n                        <li>\\r\\n                            <a title=\\\"{{ \\'FieldType.Entity.Edit\\' | translate }}\\\" ng-click=\\\"edit(item, index)\\\" ng-if=\\\"to.settings.merged.EnableEdit\\\">\\r\\n                                <i class=\\\"icon-pencil\\\"></i>\\r\\n                            </a>\\r\\n                        </li>\\r\\n                        <li>\\r\\n                            <a title=\\\"{{ \\'FieldType.Entity.Remove\\' | translate }}\\\" ng-click=\\\"removeSlot(item, $index)\\\" class=\\\"eav-entityselect-item-remove\\\" ng-if=\\\"to.settings.merged.EnableRemove\\\">\\r\\n                                <i ng-class=\\\"{ \\'icon-minus-circled\\': to.settings.merged.AllowMultiValue, \\'icon-down-dir\\': !to.settings.merged.AllowMultiValue  }\\\"></i>\\r\\n                            </a>\\r\\n                        </li>\\r\\n                        <li>\\r\\n                            <!-- todo: i18n, code in action, icon-visiblity/alignment -->\\r\\n                            <a title=\\\"{{ \\'FieldType.Entity.Delete\\' | translate }}\\\" ng-click=\\\"deleteItemInSlot(item, $index)\\\" class=\\\"eav-entityselect-item-remove\\\" ng-if=\\\"to.settings.merged.EnableDelete\\\">\\r\\n                                <i class=\\\"icon-cancel\\\"></i>\\r\\n                            </a>\\r\\n                        </li>\\r\\n                    </ul>\\r\\n                </td>\\r\\n            </tr>\\r\\n        </table>\\r\\n    </div>\\r\\n    <ol>\\r\\n        <!-- add existing entity to this list--><!--ng-if=\\\"to.settings.merged.EnableAddExisting\\\"-->\\r\\n        <li class=\\\"eav-entityselect-item subtle-till-mouseover\\\"\\r\\n            ng-show=\\\"to.settings.merged.EnableAddExisting && (to.settings.merged.AllowMultiValue || chosenEntities.length < 1)\\\">\\r\\n            <div>\\r\\n                <i class=\\\"icon-plus-circled pull-left eav-entityselect-icon-before-select\\\"></i>\\r\\n                <div class=\\\"eav-entityselect-selector-wrapper\\\">\\r\\n                    <select class=\\\"eav-entityselect-selector form-control input-lg\\\"\\r\\n                            formly-skip-ng-model-attrs-manipulator\\r\\n                            ng-model=\\\"selectedEntity\\\"\\r\\n                            ng-change=\\\"addEntity()\\\">\\r\\n                        <option value=\\\"\\\" translate=\\\"FieldType.Entity.Choose\\\"></option>\\r\\n                        <option ng-repeat=\\\"item in availableEntities\\\" ng-disabled=\\\"chosenEntities.indexOf(item.Value) != -1\\\" value=\\\"{{item.Value}}\\\">{{item.Text}}</option>\\r\\n                    </select>\\r\\n                </div>\\r\\n            </div>\\r\\n        </li>\\r\\n\\r\\n        <!-- create new entity to add to this list -->\\r\\n        <li ng-if=\\\"to.settings.merged.EnableCreate && (to.settings.merged.AllowMultiValue || chosenEntities.length < 1)\\\"\\r\\n            class=\\\"eav-entityselect-item eav-entityselect-create subtle-till-mouseover\\\">\\r\\n            <div ng-click=\\\"openNewEntityDialog()\\\">\\r\\n                <i class=\\\"icon-plus pull-left eav-entityselect-icon\\\"></i>\\r\\n                <span>{{ \\'FieldType.Entity.New\\' | translate }}&nbsp;</span>\\r\\n            </div>\\r\\n        </li>\\r\\n    </ol>\\r\\n</div>\");\n$templateCache.put(\"fields/custom/custom-default.html\",\"<div class=\\\"alert alert-danger\\\">\\r\\n    ERROR - This is a custom field, you shouldn\\'t see this. You only see this because the custom-dialog is missing.\\r\\n</div>\\r\\n<input class=\\\"form-control input-lg\\\" ng-pattern=\\\"vm.regexPattern\\\" ng-model=\\\"value.Value\\\">\");\n$templateCache.put(\"ml-entities/tests/SpecRunner.html\",\"<!DOCTYPE html>\\r\\n<html>\\r\\n<head>\\r\\n  <meta charset=\\\"utf-8\\\">\\r\\n  <title>Jasmine Spec Runner v2.3.4</title>\\r\\n    <!--\\r\\n  <link rel=\\\"shortcut icon\\\" type=\\\"image/png\\\" href=\\\"lib/jasmine-2.3.4/jasmine_favicon.png\\\">\\r\\n  <link rel=\\\"stylesheet\\\" href=\\\"lib/jasmine-2.3.4/jasmine.css\\\">\\r\\n\\r\\n  <script src=\\\"lib/jasmine-2.3.4/jasmine.js\\\"></script>\\r\\n  <script src=\\\"lib/jasmine-2.3.4/jasmine-html.js\\\"></script>\\r\\n  <script src=\\\"lib/jasmine-2.3.4/boot.js\\\"></script>\\r\\n        -->\\r\\n\\r\\n    <link rel=\\\"stylesheet\\\" href=\\\"../../../../node_modules\\\\grunt-contrib-jasmine\\\\node_modules\\\\jasmine-core/lib/jasmine-core/jasmine.css\\\">\\r\\n    <script src=\\\"../../../../node_modules\\\\grunt-contrib-jasmine\\\\node_modules\\\\jasmine-core/lib/jasmine-core/jasmine.js\\\"></script>\\r\\n    <script src=\\\"../../../../node_modules\\\\grunt-contrib-jasmine\\\\node_modules\\\\jasmine-core/lib/jasmine-core/jasmine-html.js\\\"></script>\\r\\n    <script src=\\\"../../../../node_modules\\\\grunt-contrib-jasmine\\\\node_modules\\\\jasmine-core/lib/jasmine-core/boot.js\\\"></script>\\r\\n  <!-- include source files here... -->\\r\\n    <!--\\r\\n  <script src=\\\"src/Player.js\\\"></script>\\r\\n  <script src=\\\"src/Song.js\\\"></script>\\r\\n    -->\\r\\n    <script src=\\\"../entity-enhancer.js\\\"></script>\\r\\n\\r\\n\\r\\n  <!-- include spec files here... -->\\r\\n    <!--\\r\\n  <script src=\\\"spec/SpecHelper.js\\\"></script>\\r\\n  <script src=\\\"spec/PlayerSpec.js\\\"></script>\\r\\n        -->\\r\\n    <script src=\\\"../specs/eav-content-ml.spec.js\\\"></script>\\r\\n\\r\\n</head>\\r\\n\\r\\n<body>\\r\\n</body>\\r\\n</html>\\r\\n\");}]);\n\r\n(function () {\r\n    \"use strict\";\r\n\r\n    angular.module(\"eavFieldTemplates\")\r\n        .config([\"formlyConfigProvider\", function (formlyConfigProvider) {\r\n            formlyConfigProvider.setWrapper({\r\n                name: 'collapsible',\r\n                templateUrl: \"wrappers/collapsible.html\"\r\n            });\r\n        }]);\r\n})();\n\r\n(function() {\r\n\t\"use strict\";\r\n\r\n    angular.module(\"eavFieldTemplates\")\r\n        .config([\"formlyConfigProvider\", function(formlyConfigProvider) {\r\n            formlyConfigProvider.setWrapper({\r\n                name: 'disablevisually',\r\n                templateUrl: \"wrappers/disablevisually.html\"\r\n            });\r\n        }]);\r\n})();\n\r\n(function() {\r\n\t\"use strict\";\r\n\r\n    angular.module(\"eavFieldTemplates\")\r\n        .config([\"formlyConfigProvider\", function(formlyConfigProvider) {\r\n            formlyConfigProvider.setWrapper({\r\n                name: 'eavLabel',\r\n                templateUrl: \"wrappers/eav-label.html\"\r\n            });\r\n        }]);\r\n})();\n\r\n(function() {\r\n\t\"use strict\";\r\n\r\n    angular.module(\"eavFieldTemplates\")\r\n        .config([\"formlyConfigProvider\", function(formlyConfigProvider) {\r\n            formlyConfigProvider.setWrapper({\r\n                name: 'fieldGroup',\r\n                templateUrl: \"wrappers/field-group.html\"\r\n            });\r\n        }]);\r\n})();"],"sourceRoot":"/source/"}